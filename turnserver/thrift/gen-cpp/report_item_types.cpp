/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "report_item_types.h"

#include <algorithm>
#include <ostream>

#include "../TToString.h"




EncryptedItem::~EncryptedItem() throw() {
}


void EncryptedItem::__set_encType(const int32_t val) {
  this->encType = val;
__isset.encType = true;
}

void EncryptedItem::__set_key1(const std::string& val) {
  this->key1 = val;
__isset.key1 = true;
}

void EncryptedItem::__set_key2(const std::string& val) {
  this->key2 = val;
__isset.key2 = true;
}

void EncryptedItem::__set_key3(const std::string& val) {
  this->key3 = val;
__isset.key3 = true;
}

void EncryptedItem::__set_key4(const std::string& val) {
  this->key4 = val;
__isset.key4 = true;
}

void EncryptedItem::__set_payload(const std::string& val) {
  this->payload = val;
__isset.payload = true;
}

const char* EncryptedItem::ascii_fingerprint = "E63460C7200B1019E702905930F39D30";
const uint8_t EncryptedItem::binary_fingerprint[16] = {0xE6,0x34,0x60,0xC7,0x20,0x0B,0x10,0x19,0xE7,0x02,0x90,0x59,0x30,0xF3,0x9D,0x30};

uint32_t EncryptedItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->encType);
          this->__isset.encType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key1);
          this->__isset.key1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key2);
          this->__isset.key2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key3);
          this->__isset.key3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key4);
          this->__isset.key4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EncryptedItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("EncryptedItem");

  if (this->__isset.encType) {
    xfer += oprot->writeFieldBegin("encType", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->encType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key1) {
    xfer += oprot->writeFieldBegin("key1", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->key1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key2) {
    xfer += oprot->writeFieldBegin("key2", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeBinary(this->key2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key3) {
    xfer += oprot->writeFieldBegin("key3", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->key3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key4) {
    xfer += oprot->writeFieldBegin("key4", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->key4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeBinary(this->payload);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(EncryptedItem &a, EncryptedItem &b) {
  using ::std::swap;
  swap(a.encType, b.encType);
  swap(a.key1, b.key1);
  swap(a.key2, b.key2);
  swap(a.key3, b.key3);
  swap(a.key4, b.key4);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

EncryptedItem::EncryptedItem(const EncryptedItem& other0) {
  encType = other0.encType;
  key1 = other0.key1;
  key2 = other0.key2;
  key3 = other0.key3;
  key4 = other0.key4;
  payload = other0.payload;
  __isset = other0.__isset;
}
EncryptedItem& EncryptedItem::operator=(const EncryptedItem& other1) {
  encType = other1.encType;
  key1 = other1.key1;
  key2 = other1.key2;
  key3 = other1.key3;
  key4 = other1.key4;
  payload = other1.payload;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const EncryptedItem& obj) {
  using apache::thrift::to_string;
  out << "EncryptedItem(";
  out << "encType="; (obj.__isset.encType ? (out << to_string(obj.encType)) : (out << "<null>"));
  out << ", " << "key1="; (obj.__isset.key1 ? (out << to_string(obj.key1)) : (out << "<null>"));
  out << ", " << "key2="; (obj.__isset.key2 ? (out << to_string(obj.key2)) : (out << "<null>"));
  out << ", " << "key3="; (obj.__isset.key3 ? (out << to_string(obj.key3)) : (out << "<null>"));
  out << ", " << "key4="; (obj.__isset.key4 ? (out << to_string(obj.key4)) : (out << "<null>"));
  out << ", " << "payload="; (obj.__isset.payload ? (out << to_string(obj.payload)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkHeader::~VosdkHeader() throw() {
}


void VosdkHeader::__set_sid(const std::string& val) {
  this->sid = val;
__isset.sid = true;
}

void VosdkHeader::__set_cname(const std::string& val) {
  this->cname = val;
__isset.cname = true;
}

void VosdkHeader::__set_cid(const int64_t val) {
  this->cid = val;
__isset.cid = true;
}

void VosdkHeader::__set_lts(const int64_t val) {
  this->lts = val;
__isset.lts = true;
}

void VosdkHeader::__set_ip(const std::string& val) {
  this->ip = val;
__isset.ip = true;
}

void VosdkHeader::__set_uid(const int64_t val) {
  this->uid = val;
__isset.uid = true;
}

void VosdkHeader::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}

void VosdkHeader::__set_elapse(const int64_t val) {
  this->elapse = val;
__isset.elapse = true;
}

void VosdkHeader::__set_peer(const int64_t val) {
  this->peer = val;
__isset.peer = true;
}

const char* VosdkHeader::ascii_fingerprint = "3C6FBB1DBFDAB67A445B617A09875A7F";
const uint8_t VosdkHeader::binary_fingerprint[16] = {0x3C,0x6F,0xBB,0x1D,0xBF,0xDA,0xB6,0x7A,0x44,0x5B,0x61,0x7A,0x09,0x87,0x5A,0x7F};

uint32_t VosdkHeader::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sid);
          this->__isset.sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cname);
          this->__isset.cname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cid);
          this->__isset.cid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->elapse);
          this->__isset.elapse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peer);
          this->__isset.peer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkHeader::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkHeader");

  if (this->__isset.sid) {
    xfer += oprot->writeFieldBegin("sid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->sid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cname) {
    xfer += oprot->writeFieldBegin("cname", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->cname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cid) {
    xfer += oprot->writeFieldBegin("cid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->cid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lts) {
    xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->lts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip) {
    xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.elapse) {
    xfer += oprot->writeFieldBegin("elapse", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->elapse);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peer) {
    xfer += oprot->writeFieldBegin("peer", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->peer);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkHeader &a, VosdkHeader &b) {
  using ::std::swap;
  swap(a.sid, b.sid);
  swap(a.cname, b.cname);
  swap(a.cid, b.cid);
  swap(a.lts, b.lts);
  swap(a.ip, b.ip);
  swap(a.uid, b.uid);
  swap(a.success, b.success);
  swap(a.elapse, b.elapse);
  swap(a.peer, b.peer);
  swap(a.__isset, b.__isset);
}

VosdkHeader::VosdkHeader(const VosdkHeader& other2) {
  sid = other2.sid;
  cname = other2.cname;
  cid = other2.cid;
  lts = other2.lts;
  ip = other2.ip;
  uid = other2.uid;
  success = other2.success;
  elapse = other2.elapse;
  peer = other2.peer;
  __isset = other2.__isset;
}
VosdkHeader& VosdkHeader::operator=(const VosdkHeader& other3) {
  sid = other3.sid;
  cname = other3.cname;
  cid = other3.cid;
  lts = other3.lts;
  ip = other3.ip;
  uid = other3.uid;
  success = other3.success;
  elapse = other3.elapse;
  peer = other3.peer;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkHeader& obj) {
  using apache::thrift::to_string;
  out << "VosdkHeader(";
  out << "sid="; (obj.__isset.sid ? (out << to_string(obj.sid)) : (out << "<null>"));
  out << ", " << "cname="; (obj.__isset.cname ? (out << to_string(obj.cname)) : (out << "<null>"));
  out << ", " << "cid="; (obj.__isset.cid ? (out << to_string(obj.cid)) : (out << "<null>"));
  out << ", " << "lts="; (obj.__isset.lts ? (out << to_string(obj.lts)) : (out << "<null>"));
  out << ", " << "ip="; (obj.__isset.ip ? (out << to_string(obj.ip)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "success="; (obj.__isset.success ? (out << to_string(obj.success)) : (out << "<null>"));
  out << ", " << "elapse="; (obj.__isset.elapse ? (out << to_string(obj.elapse)) : (out << "<null>"));
  out << ", " << "peer="; (obj.__isset.peer ? (out << to_string(obj.peer)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkCounterItem::~VosdkCounterItem() throw() {
}


void VosdkCounterItem::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void VosdkCounterItem::__set_lts(const int64_t val) {
  this->lts = val;
__isset.lts = true;
}

void VosdkCounterItem::__set_value(const int32_t val) {
  this->value = val;
__isset.value = true;
}

void VosdkCounterItem::__set_id(const int32_t val) {
  this->id = val;
__isset.id = true;
}

void VosdkCounterItem::__set_tagErrorCode(const int32_t val) {
  this->tagErrorCode = val;
__isset.tagErrorCode = true;
}

const char* VosdkCounterItem::ascii_fingerprint = "C019BD9C5C74062EF1B7E51D59FB3E2B";
const uint8_t VosdkCounterItem::binary_fingerprint[16] = {0xC0,0x19,0xBD,0x9C,0x5C,0x74,0x06,0x2E,0xF1,0xB7,0xE5,0x1D,0x59,0xFB,0x3E,0x2B};

uint32_t VosdkCounterItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tagErrorCode);
          this->__isset.tagErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkCounterItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkCounterItem");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lts) {
    xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->lts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagErrorCode) {
    xfer += oprot->writeFieldBegin("tagErrorCode", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->tagErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkCounterItem &a, VosdkCounterItem &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.lts, b.lts);
  swap(a.value, b.value);
  swap(a.id, b.id);
  swap(a.tagErrorCode, b.tagErrorCode);
  swap(a.__isset, b.__isset);
}

VosdkCounterItem::VosdkCounterItem(const VosdkCounterItem& other4) {
  name = other4.name;
  lts = other4.lts;
  value = other4.value;
  id = other4.id;
  tagErrorCode = other4.tagErrorCode;
  __isset = other4.__isset;
}
VosdkCounterItem& VosdkCounterItem::operator=(const VosdkCounterItem& other5) {
  name = other5.name;
  lts = other5.lts;
  value = other5.value;
  id = other5.id;
  tagErrorCode = other5.tagErrorCode;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkCounterItem& obj) {
  using apache::thrift::to_string;
  out << "VosdkCounterItem(";
  out << "name="; (obj.__isset.name ? (out << to_string(obj.name)) : (out << "<null>"));
  out << ", " << "lts="; (obj.__isset.lts ? (out << to_string(obj.lts)) : (out << "<null>"));
  out << ", " << "value="; (obj.__isset.value ? (out << to_string(obj.value)) : (out << "<null>"));
  out << ", " << "id="; (obj.__isset.id ? (out << to_string(obj.id)) : (out << "<null>"));
  out << ", " << "tagErrorCode="; (obj.__isset.tagErrorCode ? (out << to_string(obj.tagErrorCode)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkCounter::~VosdkCounter() throw() {
}


void VosdkCounter::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkCounter::__set_items(const std::vector<VosdkCounterItem> & val) {
  this->items = val;
__isset.items = true;
}

const char* VosdkCounter::ascii_fingerprint = "E5A7E3E543C757C392DAAD0A8C4AC992";
const uint8_t VosdkCounter::binary_fingerprint[16] = {0xE5,0xA7,0xE3,0xE5,0x43,0xC7,0x57,0xC3,0x92,0xDA,0xAD,0x0A,0x8C,0x4A,0xC9,0x92};

uint32_t VosdkCounter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->items.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->items[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkCounter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkCounter");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.items) {
    xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
      std::vector<VosdkCounterItem> ::const_iterator _iter11;
      for (_iter11 = this->items.begin(); _iter11 != this->items.end(); ++_iter11)
      {
        xfer += (*_iter11).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkCounter &a, VosdkCounter &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.items, b.items);
  swap(a.__isset, b.__isset);
}

VosdkCounter::VosdkCounter(const VosdkCounter& other12) {
  header = other12.header;
  items = other12.items;
  __isset = other12.__isset;
}
VosdkCounter& VosdkCounter::operator=(const VosdkCounter& other13) {
  header = other13.header;
  items = other13.items;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkCounter& obj) {
  using apache::thrift::to_string;
  out << "VosdkCounter(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "items="; (obj.__isset.items ? (out << to_string(obj.items)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkSession::~VosdkSession() throw() {
}


void VosdkSession::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkSession::__set_vk(const std::string& val) {
  this->vk = val;
__isset.vk = true;
}

void VosdkSession::__set_ver(const std::string& val) {
  this->ver = val;
__isset.ver = true;
}

void VosdkSession::__set_net1(const int32_t val) {
  this->net1 = val;
__isset.net1 = true;
}

void VosdkSession::__set_net2(const int32_t val) {
  this->net2 = val;
__isset.net2 = true;
}

void VosdkSession::__set_localIp(const std::string& val) {
  this->localIp = val;
__isset.localIp = true;
}

void VosdkSession::__set_ssid(const std::string& val) {
  this->ssid = val;
__isset.ssid = true;
}

void VosdkSession::__set_bssid(const std::string& val) {
  this->bssid = val;
__isset.bssid = true;
}

void VosdkSession::__set_siglevel(const int32_t val) {
  this->siglevel = val;
__isset.siglevel = true;
}

void VosdkSession::__set_rssi(const int32_t val) {
  this->rssi = val;
__isset.rssi = true;
}

void VosdkSession::__set_os1(const int32_t val) {
  this->os1 = val;
__isset.os1 = true;
}

void VosdkSession::__set_did(const std::string& val) {
  this->did = val;
__isset.did = true;
}

void VosdkSession::__set_pnq(const int32_t val) {
  this->pnq = val;
__isset.pnq = true;
}

void VosdkSession::__set_lost(const int32_t val) {
  this->lost = val;
__isset.lost = true;
}

void VosdkSession::__set_info(const std::string& val) {
  this->info = val;
__isset.info = true;
}

void VosdkSession::__set_lsid(const std::string& val) {
  this->lsid = val;
__isset.lsid = true;
}

void VosdkSession::__set_channelMode(const int32_t val) {
  this->channelMode = val;
__isset.channelMode = true;
}

void VosdkSession::__set_cheVer(const std::string& val) {
  this->cheVer = val;
__isset.cheVer = true;
}

void VosdkSession::__set_sdkBuildNumber(const int32_t val) {
  this->sdkBuildNumber = val;
__isset.sdkBuildNumber = true;
}

void VosdkSession::__set_cheBuildNumber(const int32_t val) {
  this->cheBuildNumber = val;
__isset.cheBuildNumber = true;
}

void VosdkSession::__set_fsid(const std::string& val) {
  this->fsid = val;
__isset.fsid = true;
}

void VosdkSession::__set_channelProfile(const int32_t val) {
  this->channelProfile = val;
__isset.channelProfile = true;
}

void VosdkSession::__set_netSubType(const int32_t val) {
  this->netSubType = val;
__isset.netSubType = true;
}

void VosdkSession::__set_clientType(const int32_t val) {
  this->clientType = val;
__isset.clientType = true;
}

void VosdkSession::__set_appCategory(const int32_t val) {
  this->appCategory = val;
__isset.appCategory = true;
}

void VosdkSession::__set_clientRole(const int32_t val) {
  this->clientRole = val;
__isset.clientRole = true;
}

void VosdkSession::__set_installId(const std::string& val) {
  this->installId = val;
__isset.installId = true;
}

const char* VosdkSession::ascii_fingerprint = "B05B4756B47D15BBF04BD72147F61841";
const uint8_t VosdkSession::binary_fingerprint[16] = {0xB0,0x5B,0x47,0x56,0xB4,0x7D,0x15,0xBB,0xF0,0x4B,0xD7,0x21,0x47,0xF6,0x18,0x41};

uint32_t VosdkSession::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vk);
          this->__isset.vk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ver);
          this->__isset.ver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->net1);
          this->__isset.net1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->net2);
          this->__isset.net2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localIp);
          this->__isset.localIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ssid);
          this->__isset.ssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bssid);
          this->__isset.bssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->siglevel);
          this->__isset.siglevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rssi);
          this->__isset.rssi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->os1);
          this->__isset.os1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->did);
          this->__isset.did = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pnq);
          this->__isset.pnq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lost);
          this->__isset.lost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lsid);
          this->__isset.lsid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->channelMode);
          this->__isset.channelMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cheVer);
          this->__isset.cheVer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sdkBuildNumber);
          this->__isset.sdkBuildNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cheBuildNumber);
          this->__isset.cheBuildNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fsid);
          this->__isset.fsid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->channelProfile);
          this->__isset.channelProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->netSubType);
          this->__isset.netSubType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clientType);
          this->__isset.clientType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->appCategory);
          this->__isset.appCategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clientRole);
          this->__isset.clientRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->installId);
          this->__isset.installId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkSession::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkSession");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vk) {
    xfer += oprot->writeFieldBegin("vk", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->vk);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ver) {
    xfer += oprot->writeFieldBegin("ver", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->ver);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.net1) {
    xfer += oprot->writeFieldBegin("net1", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->net1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.net2) {
    xfer += oprot->writeFieldBegin("net2", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->net2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localIp) {
    xfer += oprot->writeFieldBegin("localIp", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->localIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ssid) {
    xfer += oprot->writeFieldBegin("ssid", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->ssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bssid) {
    xfer += oprot->writeFieldBegin("bssid", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->bssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.siglevel) {
    xfer += oprot->writeFieldBegin("siglevel", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->siglevel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rssi) {
    xfer += oprot->writeFieldBegin("rssi", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->rssi);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.os1) {
    xfer += oprot->writeFieldBegin("os1", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->os1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.did) {
    xfer += oprot->writeFieldBegin("did", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->did);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pnq) {
    xfer += oprot->writeFieldBegin("pnq", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->pnq);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost) {
    xfer += oprot->writeFieldBegin("lost", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->lost);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.info) {
    xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->info);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lsid) {
    xfer += oprot->writeFieldBegin("lsid", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->lsid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channelMode) {
    xfer += oprot->writeFieldBegin("channelMode", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32(this->channelMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cheVer) {
    xfer += oprot->writeFieldBegin("cheVer", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->cheVer);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sdkBuildNumber) {
    xfer += oprot->writeFieldBegin("sdkBuildNumber", ::apache::thrift::protocol::T_I32, 22);
    xfer += oprot->writeI32(this->sdkBuildNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cheBuildNumber) {
    xfer += oprot->writeFieldBegin("cheBuildNumber", ::apache::thrift::protocol::T_I32, 23);
    xfer += oprot->writeI32(this->cheBuildNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fsid) {
    xfer += oprot->writeFieldBegin("fsid", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->fsid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channelProfile) {
    xfer += oprot->writeFieldBegin("channelProfile", ::apache::thrift::protocol::T_I32, 25);
    xfer += oprot->writeI32(this->channelProfile);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.netSubType) {
    xfer += oprot->writeFieldBegin("netSubType", ::apache::thrift::protocol::T_I32, 26);
    xfer += oprot->writeI32(this->netSubType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clientType) {
    xfer += oprot->writeFieldBegin("clientType", ::apache::thrift::protocol::T_I32, 27);
    xfer += oprot->writeI32(this->clientType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.appCategory) {
    xfer += oprot->writeFieldBegin("appCategory", ::apache::thrift::protocol::T_I32, 28);
    xfer += oprot->writeI32(this->appCategory);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clientRole) {
    xfer += oprot->writeFieldBegin("clientRole", ::apache::thrift::protocol::T_I32, 29);
    xfer += oprot->writeI32(this->clientRole);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.installId) {
    xfer += oprot->writeFieldBegin("installId", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->installId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkSession &a, VosdkSession &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.vk, b.vk);
  swap(a.ver, b.ver);
  swap(a.net1, b.net1);
  swap(a.net2, b.net2);
  swap(a.localIp, b.localIp);
  swap(a.ssid, b.ssid);
  swap(a.bssid, b.bssid);
  swap(a.siglevel, b.siglevel);
  swap(a.rssi, b.rssi);
  swap(a.os1, b.os1);
  swap(a.did, b.did);
  swap(a.pnq, b.pnq);
  swap(a.lost, b.lost);
  swap(a.info, b.info);
  swap(a.lsid, b.lsid);
  swap(a.channelMode, b.channelMode);
  swap(a.cheVer, b.cheVer);
  swap(a.sdkBuildNumber, b.sdkBuildNumber);
  swap(a.cheBuildNumber, b.cheBuildNumber);
  swap(a.fsid, b.fsid);
  swap(a.channelProfile, b.channelProfile);
  swap(a.netSubType, b.netSubType);
  swap(a.clientType, b.clientType);
  swap(a.appCategory, b.appCategory);
  swap(a.clientRole, b.clientRole);
  swap(a.installId, b.installId);
  swap(a.__isset, b.__isset);
}

VosdkSession::VosdkSession(const VosdkSession& other14) {
  header = other14.header;
  vk = other14.vk;
  ver = other14.ver;
  net1 = other14.net1;
  net2 = other14.net2;
  localIp = other14.localIp;
  ssid = other14.ssid;
  bssid = other14.bssid;
  siglevel = other14.siglevel;
  rssi = other14.rssi;
  os1 = other14.os1;
  did = other14.did;
  pnq = other14.pnq;
  lost = other14.lost;
  info = other14.info;
  lsid = other14.lsid;
  channelMode = other14.channelMode;
  cheVer = other14.cheVer;
  sdkBuildNumber = other14.sdkBuildNumber;
  cheBuildNumber = other14.cheBuildNumber;
  fsid = other14.fsid;
  channelProfile = other14.channelProfile;
  netSubType = other14.netSubType;
  clientType = other14.clientType;
  appCategory = other14.appCategory;
  clientRole = other14.clientRole;
  installId = other14.installId;
  __isset = other14.__isset;
}
VosdkSession& VosdkSession::operator=(const VosdkSession& other15) {
  header = other15.header;
  vk = other15.vk;
  ver = other15.ver;
  net1 = other15.net1;
  net2 = other15.net2;
  localIp = other15.localIp;
  ssid = other15.ssid;
  bssid = other15.bssid;
  siglevel = other15.siglevel;
  rssi = other15.rssi;
  os1 = other15.os1;
  did = other15.did;
  pnq = other15.pnq;
  lost = other15.lost;
  info = other15.info;
  lsid = other15.lsid;
  channelMode = other15.channelMode;
  cheVer = other15.cheVer;
  sdkBuildNumber = other15.sdkBuildNumber;
  cheBuildNumber = other15.cheBuildNumber;
  fsid = other15.fsid;
  channelProfile = other15.channelProfile;
  netSubType = other15.netSubType;
  clientType = other15.clientType;
  appCategory = other15.appCategory;
  clientRole = other15.clientRole;
  installId = other15.installId;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkSession& obj) {
  using apache::thrift::to_string;
  out << "VosdkSession(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "vk="; (obj.__isset.vk ? (out << to_string(obj.vk)) : (out << "<null>"));
  out << ", " << "ver="; (obj.__isset.ver ? (out << to_string(obj.ver)) : (out << "<null>"));
  out << ", " << "net1="; (obj.__isset.net1 ? (out << to_string(obj.net1)) : (out << "<null>"));
  out << ", " << "net2="; (obj.__isset.net2 ? (out << to_string(obj.net2)) : (out << "<null>"));
  out << ", " << "localIp="; (obj.__isset.localIp ? (out << to_string(obj.localIp)) : (out << "<null>"));
  out << ", " << "ssid="; (obj.__isset.ssid ? (out << to_string(obj.ssid)) : (out << "<null>"));
  out << ", " << "bssid="; (obj.__isset.bssid ? (out << to_string(obj.bssid)) : (out << "<null>"));
  out << ", " << "siglevel="; (obj.__isset.siglevel ? (out << to_string(obj.siglevel)) : (out << "<null>"));
  out << ", " << "rssi="; (obj.__isset.rssi ? (out << to_string(obj.rssi)) : (out << "<null>"));
  out << ", " << "os1="; (obj.__isset.os1 ? (out << to_string(obj.os1)) : (out << "<null>"));
  out << ", " << "did="; (obj.__isset.did ? (out << to_string(obj.did)) : (out << "<null>"));
  out << ", " << "pnq="; (obj.__isset.pnq ? (out << to_string(obj.pnq)) : (out << "<null>"));
  out << ", " << "lost="; (obj.__isset.lost ? (out << to_string(obj.lost)) : (out << "<null>"));
  out << ", " << "info="; (obj.__isset.info ? (out << to_string(obj.info)) : (out << "<null>"));
  out << ", " << "lsid="; (obj.__isset.lsid ? (out << to_string(obj.lsid)) : (out << "<null>"));
  out << ", " << "channelMode="; (obj.__isset.channelMode ? (out << to_string(obj.channelMode)) : (out << "<null>"));
  out << ", " << "cheVer="; (obj.__isset.cheVer ? (out << to_string(obj.cheVer)) : (out << "<null>"));
  out << ", " << "sdkBuildNumber="; (obj.__isset.sdkBuildNumber ? (out << to_string(obj.sdkBuildNumber)) : (out << "<null>"));
  out << ", " << "cheBuildNumber="; (obj.__isset.cheBuildNumber ? (out << to_string(obj.cheBuildNumber)) : (out << "<null>"));
  out << ", " << "fsid="; (obj.__isset.fsid ? (out << to_string(obj.fsid)) : (out << "<null>"));
  out << ", " << "channelProfile="; (obj.__isset.channelProfile ? (out << to_string(obj.channelProfile)) : (out << "<null>"));
  out << ", " << "netSubType="; (obj.__isset.netSubType ? (out << to_string(obj.netSubType)) : (out << "<null>"));
  out << ", " << "clientType="; (obj.__isset.clientType ? (out << to_string(obj.clientType)) : (out << "<null>"));
  out << ", " << "appCategory="; (obj.__isset.appCategory ? (out << to_string(obj.appCategory)) : (out << "<null>"));
  out << ", " << "clientRole="; (obj.__isset.clientRole ? (out << to_string(obj.clientRole)) : (out << "<null>"));
  out << ", " << "installId="; (obj.__isset.installId ? (out << to_string(obj.installId)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVocs::~VosdkVocs() throw() {
}


void VosdkVocs::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVocs::__set_ec(const int32_t val) {
  this->ec = val;
__isset.ec = true;
}

void VosdkVocs::__set_sc(const int32_t val) {
  this->sc = val;
__isset.sc = true;
}

void VosdkVocs::__set_serverIp(const std::string& val) {
  this->serverIp = val;
__isset.serverIp = true;
}

void VosdkVocs::__set_firstSuccess(const bool val) {
  this->firstSuccess = val;
__isset.firstSuccess = true;
}

void VosdkVocs::__set_responseTime(const int32_t val) {
  this->responseTime = val;
__isset.responseTime = true;
}

void VosdkVocs::__set_serverIpList(const std::vector<std::string> & val) {
  this->serverIpList = val;
__isset.serverIpList = true;
}

void VosdkVocs::__set_ssid(const std::string& val) {
  this->ssid = val;
__isset.ssid = true;
}

void VosdkVocs::__set_bssid(const std::string& val) {
  this->bssid = val;
__isset.bssid = true;
}

void VosdkVocs::__set_localWanIp(const std::string& val) {
  this->localWanIp = val;
__isset.localWanIp = true;
}

void VosdkVocs::__set_ispName(const std::string& val) {
  this->ispName = val;
__isset.ispName = true;
}

void VosdkVocs::__set_minorIsp(const bool val) {
  this->minorIsp = val;
__isset.minorIsp = true;
}

const char* VosdkVocs::ascii_fingerprint = "AB2655934AC948A3AF53F439E3B96741";
const uint8_t VosdkVocs::binary_fingerprint[16] = {0xAB,0x26,0x55,0x93,0x4A,0xC9,0x48,0xA3,0xAF,0x53,0xF4,0x39,0xE3,0xB9,0x67,0x41};

uint32_t VosdkVocs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ec);
          this->__isset.ec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sc);
          this->__isset.sc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverIp);
          this->__isset.serverIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->firstSuccess);
          this->__isset.firstSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->responseTime);
          this->__isset.responseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serverIpList.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->serverIpList.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += iprot->readString(this->serverIpList[_i20]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serverIpList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ssid);
          this->__isset.ssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bssid);
          this->__isset.bssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localWanIp);
          this->__isset.localWanIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ispName);
          this->__isset.ispName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->minorIsp);
          this->__isset.minorIsp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVocs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVocs");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ec) {
    xfer += oprot->writeFieldBegin("ec", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->ec);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sc) {
    xfer += oprot->writeFieldBegin("sc", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->sc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIp) {
    xfer += oprot->writeFieldBegin("serverIp", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->serverIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstSuccess) {
    xfer += oprot->writeFieldBegin("firstSuccess", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->firstSuccess);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.responseTime) {
    xfer += oprot->writeFieldBegin("responseTime", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->responseTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIpList) {
    xfer += oprot->writeFieldBegin("serverIpList", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->serverIpList.size()));
      std::vector<std::string> ::const_iterator _iter21;
      for (_iter21 = this->serverIpList.begin(); _iter21 != this->serverIpList.end(); ++_iter21)
      {
        xfer += oprot->writeString((*_iter21));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ssid) {
    xfer += oprot->writeFieldBegin("ssid", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->ssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bssid) {
    xfer += oprot->writeFieldBegin("bssid", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->bssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localWanIp) {
    xfer += oprot->writeFieldBegin("localWanIp", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->localWanIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ispName) {
    xfer += oprot->writeFieldBegin("ispName", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->ispName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minorIsp) {
    xfer += oprot->writeFieldBegin("minorIsp", ::apache::thrift::protocol::T_BOOL, 15);
    xfer += oprot->writeBool(this->minorIsp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVocs &a, VosdkVocs &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.ec, b.ec);
  swap(a.sc, b.sc);
  swap(a.serverIp, b.serverIp);
  swap(a.firstSuccess, b.firstSuccess);
  swap(a.responseTime, b.responseTime);
  swap(a.serverIpList, b.serverIpList);
  swap(a.ssid, b.ssid);
  swap(a.bssid, b.bssid);
  swap(a.localWanIp, b.localWanIp);
  swap(a.ispName, b.ispName);
  swap(a.minorIsp, b.minorIsp);
  swap(a.__isset, b.__isset);
}

VosdkVocs::VosdkVocs(const VosdkVocs& other22) {
  header = other22.header;
  ec = other22.ec;
  sc = other22.sc;
  serverIp = other22.serverIp;
  firstSuccess = other22.firstSuccess;
  responseTime = other22.responseTime;
  serverIpList = other22.serverIpList;
  ssid = other22.ssid;
  bssid = other22.bssid;
  localWanIp = other22.localWanIp;
  ispName = other22.ispName;
  minorIsp = other22.minorIsp;
  __isset = other22.__isset;
}
VosdkVocs& VosdkVocs::operator=(const VosdkVocs& other23) {
  header = other23.header;
  ec = other23.ec;
  sc = other23.sc;
  serverIp = other23.serverIp;
  firstSuccess = other23.firstSuccess;
  responseTime = other23.responseTime;
  serverIpList = other23.serverIpList;
  ssid = other23.ssid;
  bssid = other23.bssid;
  localWanIp = other23.localWanIp;
  ispName = other23.ispName;
  minorIsp = other23.minorIsp;
  __isset = other23.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVocs& obj) {
  using apache::thrift::to_string;
  out << "VosdkVocs(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "ec="; (obj.__isset.ec ? (out << to_string(obj.ec)) : (out << "<null>"));
  out << ", " << "sc="; (obj.__isset.sc ? (out << to_string(obj.sc)) : (out << "<null>"));
  out << ", " << "serverIp="; (obj.__isset.serverIp ? (out << to_string(obj.serverIp)) : (out << "<null>"));
  out << ", " << "firstSuccess="; (obj.__isset.firstSuccess ? (out << to_string(obj.firstSuccess)) : (out << "<null>"));
  out << ", " << "responseTime="; (obj.__isset.responseTime ? (out << to_string(obj.responseTime)) : (out << "<null>"));
  out << ", " << "serverIpList="; (obj.__isset.serverIpList ? (out << to_string(obj.serverIpList)) : (out << "<null>"));
  out << ", " << "ssid="; (obj.__isset.ssid ? (out << to_string(obj.ssid)) : (out << "<null>"));
  out << ", " << "bssid="; (obj.__isset.bssid ? (out << to_string(obj.bssid)) : (out << "<null>"));
  out << ", " << "localWanIp="; (obj.__isset.localWanIp ? (out << to_string(obj.localWanIp)) : (out << "<null>"));
  out << ", " << "ispName="; (obj.__isset.ispName ? (out << to_string(obj.ispName)) : (out << "<null>"));
  out << ", " << "minorIsp="; (obj.__isset.minorIsp ? (out << to_string(obj.minorIsp)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVos::~VosdkVos() throw() {
}


void VosdkVos::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVos::__set_ec(const int32_t val) {
  this->ec = val;
__isset.ec = true;
}

void VosdkVos::__set_sc(const int32_t val) {
  this->sc = val;
__isset.sc = true;
}

void VosdkVos::__set_serverIp(const std::string& val) {
  this->serverIp = val;
__isset.serverIp = true;
}

void VosdkVos::__set_vosList(const std::vector<std::string> & val) {
  this->vosList = val;
__isset.vosList = true;
}

void VosdkVos::__set_firstSuccess(const bool val) {
  this->firstSuccess = val;
__isset.firstSuccess = true;
}

void VosdkVos::__set_channelCount(const int32_t val) {
  this->channelCount = val;
__isset.channelCount = true;
}

void VosdkVos::__set_responseTime(const int32_t val) {
  this->responseTime = val;
__isset.responseTime = true;
}

const char* VosdkVos::ascii_fingerprint = "BCFCD223285404DB55A9DABDDE8B9E6E";
const uint8_t VosdkVos::binary_fingerprint[16] = {0xBC,0xFC,0xD2,0x23,0x28,0x54,0x04,0xDB,0x55,0xA9,0xDA,0xBD,0xDE,0x8B,0x9E,0x6E};

uint32_t VosdkVos::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ec);
          this->__isset.ec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sc);
          this->__isset.sc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverIp);
          this->__isset.serverIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vosList.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->vosList.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readString(this->vosList[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vosList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->firstSuccess);
          this->__isset.firstSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->channelCount);
          this->__isset.channelCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->responseTime);
          this->__isset.responseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVos::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVos");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ec) {
    xfer += oprot->writeFieldBegin("ec", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->ec);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sc) {
    xfer += oprot->writeFieldBegin("sc", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->sc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIp) {
    xfer += oprot->writeFieldBegin("serverIp", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->serverIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosList) {
    xfer += oprot->writeFieldBegin("vosList", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->vosList.size()));
      std::vector<std::string> ::const_iterator _iter29;
      for (_iter29 = this->vosList.begin(); _iter29 != this->vosList.end(); ++_iter29)
      {
        xfer += oprot->writeString((*_iter29));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstSuccess) {
    xfer += oprot->writeFieldBegin("firstSuccess", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->firstSuccess);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channelCount) {
    xfer += oprot->writeFieldBegin("channelCount", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->channelCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.responseTime) {
    xfer += oprot->writeFieldBegin("responseTime", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->responseTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVos &a, VosdkVos &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.ec, b.ec);
  swap(a.sc, b.sc);
  swap(a.serverIp, b.serverIp);
  swap(a.vosList, b.vosList);
  swap(a.firstSuccess, b.firstSuccess);
  swap(a.channelCount, b.channelCount);
  swap(a.responseTime, b.responseTime);
  swap(a.__isset, b.__isset);
}

VosdkVos::VosdkVos(const VosdkVos& other30) {
  header = other30.header;
  ec = other30.ec;
  sc = other30.sc;
  serverIp = other30.serverIp;
  vosList = other30.vosList;
  firstSuccess = other30.firstSuccess;
  channelCount = other30.channelCount;
  responseTime = other30.responseTime;
  __isset = other30.__isset;
}
VosdkVos& VosdkVos::operator=(const VosdkVos& other31) {
  header = other31.header;
  ec = other31.ec;
  sc = other31.sc;
  serverIp = other31.serverIp;
  vosList = other31.vosList;
  firstSuccess = other31.firstSuccess;
  channelCount = other31.channelCount;
  responseTime = other31.responseTime;
  __isset = other31.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVos& obj) {
  using apache::thrift::to_string;
  out << "VosdkVos(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "ec="; (obj.__isset.ec ? (out << to_string(obj.ec)) : (out << "<null>"));
  out << ", " << "sc="; (obj.__isset.sc ? (out << to_string(obj.sc)) : (out << "<null>"));
  out << ", " << "serverIp="; (obj.__isset.serverIp ? (out << to_string(obj.serverIp)) : (out << "<null>"));
  out << ", " << "vosList="; (obj.__isset.vosList ? (out << to_string(obj.vosList)) : (out << "<null>"));
  out << ", " << "firstSuccess="; (obj.__isset.firstSuccess ? (out << to_string(obj.firstSuccess)) : (out << "<null>"));
  out << ", " << "channelCount="; (obj.__isset.channelCount ? (out << to_string(obj.channelCount)) : (out << "<null>"));
  out << ", " << "responseTime="; (obj.__isset.responseTime ? (out << to_string(obj.responseTime)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkWebQuit::~VosdkWebQuit() throw() {
}


void VosdkWebQuit::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkWebQuit::__set_ec(const int32_t val) {
  this->ec = val;
__isset.ec = true;
}

const char* VosdkWebQuit::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkWebQuit::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkWebQuit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ec);
          this->__isset.ec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkWebQuit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkWebQuit");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ec) {
    xfer += oprot->writeFieldBegin("ec", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->ec);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkWebQuit &a, VosdkWebQuit &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.ec, b.ec);
  swap(a.__isset, b.__isset);
}

VosdkWebQuit::VosdkWebQuit(const VosdkWebQuit& other146) {
  header = other146.header;
  ec = other146.ec;
  __isset = other146.__isset;
}
VosdkWebQuit& VosdkWebQuit::operator=(const VosdkWebQuit& other147) {
  header = other147.header;
  ec = other147.ec;
  __isset = other147.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkWebQuit& obj) {
  using apache::thrift::to_string;
  out << "VosdkWebQuit(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "ec="; (obj.__isset.ec ? (out << to_string(obj.ec)) : (out << "<null>"));
  out << ")";
  return out;
}

WrtcBrowser2Gateway::~WrtcBrowser2Gateway() throw() {
}


void WrtcBrowser2Gateway::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void WrtcBrowser2Gateway::__set_cid(const int64_t val) {
  this->cid = val;
__isset.cid = true;
}

void WrtcBrowser2Gateway::__set_uid(const int64_t val) {
  this->uid = val;
__isset.uid = true;
}

void WrtcBrowser2Gateway::__set_vos_id(const int32_t val) {
  this->vos_id = val;
__isset.vos_id = true;
}

void WrtcBrowser2Gateway::__set_source_ip(const int32_t val) {
  this->source_ip = val;
__isset.source_ip = true;
}

void WrtcBrowser2Gateway::__set_source_port(const int16_t val) {
  this->source_port = val;
__isset.source_port = true;
}

void WrtcBrowser2Gateway::__set_dest_ip(const int32_t val) {
  this->dest_ip = val;
__isset.dest_ip = true;
}

void WrtcBrowser2Gateway::__set_dest_port(const int16_t val) {
  this->dest_port = val;
__isset.dest_port = true;
}

void WrtcBrowser2Gateway::__set_delay(const int16_t val) {
  this->delay = val;
__isset.delay = true;
}

void WrtcBrowser2Gateway::__set_jitter100(const int16_t val) {
  this->jitter100 = val;
__isset.jitter100 = true;
}

void WrtcBrowser2Gateway::__set_jitter95(const int16_t val) {
  this->jitter95 = val;
__isset.jitter95 = true;
}

void WrtcBrowser2Gateway::__set_jitter90(const int16_t val) {
  this->jitter90 = val;
__isset.jitter90 = true;
}

void WrtcBrowser2Gateway::__set_lost_ratio(const int16_t val) {
  this->lost_ratio = val;
__isset.lost_ratio = true;
}

void WrtcBrowser2Gateway::__set_lost_ratio2(const int16_t val) {
  this->lost_ratio2 = val;
__isset.lost_ratio2 = true;
}

void WrtcBrowser2Gateway::__set_lost_ratio3(const int16_t val) {
  this->lost_ratio3 = val;
__isset.lost_ratio3 = true;
}

void WrtcBrowser2Gateway::__set_lts(const int64_t val) {
  this->lts = val;
__isset.lts = true;
}

void WrtcBrowser2Gateway::__set_sid(const std::string& val) {
  this->sid = val;
__isset.sid = true;
}

const char* WrtcBrowser2Gateway::ascii_fingerprint = "C6ED383665B5FC8F90BF6952A7D1509E";
const uint8_t WrtcBrowser2Gateway::binary_fingerprint[16] = {0xC6,0xED,0x38,0x36,0x65,0xB5,0xFC,0x8F,0x90,0xBF,0x69,0x52,0xA7,0xD1,0x50,0x9E};

uint32_t WrtcBrowser2Gateway::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cid);
          this->__isset.cid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vos_id);
          this->__isset.vos_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->source_ip);
          this->__isset.source_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->source_port);
          this->__isset.source_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dest_ip);
          this->__isset.dest_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dest_port);
          this->__isset.dest_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->delay);
          this->__isset.delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter100);
          this->__isset.jitter100 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter95);
          this->__isset.jitter95 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter90);
          this->__isset.jitter90 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio);
          this->__isset.lost_ratio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio2);
          this->__isset.lost_ratio2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio3);
          this->__isset.lost_ratio3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sid);
          this->__isset.sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcBrowser2Gateway::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcBrowser2Gateway");

  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cid) {
    xfer += oprot->writeFieldBegin("cid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->cid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vos_id) {
    xfer += oprot->writeFieldBegin("vos_id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->vos_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source_ip) {
    xfer += oprot->writeFieldBegin("source_ip", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->source_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source_port) {
    xfer += oprot->writeFieldBegin("source_port", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->source_port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dest_ip) {
    xfer += oprot->writeFieldBegin("dest_ip", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->dest_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dest_port) {
    xfer += oprot->writeFieldBegin("dest_port", ::apache::thrift::protocol::T_I16, 8);
    xfer += oprot->writeI16(this->dest_port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.delay) {
    xfer += oprot->writeFieldBegin("delay", ::apache::thrift::protocol::T_I16, 9);
    xfer += oprot->writeI16(this->delay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter100) {
    xfer += oprot->writeFieldBegin("jitter100", ::apache::thrift::protocol::T_I16, 10);
    xfer += oprot->writeI16(this->jitter100);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter95) {
    xfer += oprot->writeFieldBegin("jitter95", ::apache::thrift::protocol::T_I16, 11);
    xfer += oprot->writeI16(this->jitter95);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter90) {
    xfer += oprot->writeFieldBegin("jitter90", ::apache::thrift::protocol::T_I16, 12);
    xfer += oprot->writeI16(this->jitter90);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio) {
    xfer += oprot->writeFieldBegin("lost_ratio", ::apache::thrift::protocol::T_I16, 13);
    xfer += oprot->writeI16(this->lost_ratio);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio2) {
    xfer += oprot->writeFieldBegin("lost_ratio2", ::apache::thrift::protocol::T_I16, 14);
    xfer += oprot->writeI16(this->lost_ratio2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio3) {
    xfer += oprot->writeFieldBegin("lost_ratio3", ::apache::thrift::protocol::T_I16, 15);
    xfer += oprot->writeI16(this->lost_ratio3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lts) {
    xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 16);
    xfer += oprot->writeI64(this->lts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sid) {
    xfer += oprot->writeFieldBegin("sid", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->sid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcBrowser2Gateway &a, WrtcBrowser2Gateway &b) {
  using ::std::swap;
  swap(a.vid, b.vid);
  swap(a.cid, b.cid);
  swap(a.uid, b.uid);
  swap(a.vos_id, b.vos_id);
  swap(a.source_ip, b.source_ip);
  swap(a.source_port, b.source_port);
  swap(a.dest_ip, b.dest_ip);
  swap(a.dest_port, b.dest_port);
  swap(a.delay, b.delay);
  swap(a.jitter100, b.jitter100);
  swap(a.jitter95, b.jitter95);
  swap(a.jitter90, b.jitter90);
  swap(a.lost_ratio, b.lost_ratio);
  swap(a.lost_ratio2, b.lost_ratio2);
  swap(a.lost_ratio3, b.lost_ratio3);
  swap(a.lts, b.lts);
  swap(a.sid, b.sid);
  swap(a.__isset, b.__isset);
}

WrtcBrowser2Gateway::WrtcBrowser2Gateway(const WrtcBrowser2Gateway& other52) {
  vid = other52.vid;
  cid = other52.cid;
  uid = other52.uid;
  vos_id = other52.vos_id;
  source_ip = other52.source_ip;
  source_port = other52.source_port;
  dest_ip = other52.dest_ip;
  dest_port = other52.dest_port;
  delay = other52.delay;
  jitter100 = other52.jitter100;
  jitter95 = other52.jitter95;
  jitter90 = other52.jitter90;
  lost_ratio = other52.lost_ratio;
  lost_ratio2 = other52.lost_ratio2;
  lost_ratio3 = other52.lost_ratio3;
  lts = other52.lts;
  sid = other52.sid;
  __isset = other52.__isset;
}
WrtcBrowser2Gateway& WrtcBrowser2Gateway::operator=(const WrtcBrowser2Gateway& other53) {
  vid = other53.vid;
  cid = other53.cid;
  uid = other53.uid;
  vos_id = other53.vos_id;
  source_ip = other53.source_ip;
  source_port = other53.source_port;
  dest_ip = other53.dest_ip;
  dest_port = other53.dest_port;
  delay = other53.delay;
  jitter100 = other53.jitter100;
  jitter95 = other53.jitter95;
  jitter90 = other53.jitter90;
  lost_ratio = other53.lost_ratio;
  lost_ratio2 = other53.lost_ratio2;
  lost_ratio3 = other53.lost_ratio3;
  lts = other53.lts;
  sid = other53.sid;
  __isset = other53.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcBrowser2Gateway& obj) {
  using apache::thrift::to_string;
  out << "WrtcBrowser2Gateway(";
  out << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "cid="; (obj.__isset.cid ? (out << to_string(obj.cid)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "vos_id="; (obj.__isset.vos_id ? (out << to_string(obj.vos_id)) : (out << "<null>"));
  out << ", " << "source_ip="; (obj.__isset.source_ip ? (out << to_string(obj.source_ip)) : (out << "<null>"));
  out << ", " << "source_port="; (obj.__isset.source_port ? (out << to_string(obj.source_port)) : (out << "<null>"));
  out << ", " << "dest_ip="; (obj.__isset.dest_ip ? (out << to_string(obj.dest_ip)) : (out << "<null>"));
  out << ", " << "dest_port="; (obj.__isset.dest_port ? (out << to_string(obj.dest_port)) : (out << "<null>"));
  out << ", " << "delay="; (obj.__isset.delay ? (out << to_string(obj.delay)) : (out << "<null>"));
  out << ", " << "jitter100="; (obj.__isset.jitter100 ? (out << to_string(obj.jitter100)) : (out << "<null>"));
  out << ", " << "jitter95="; (obj.__isset.jitter95 ? (out << to_string(obj.jitter95)) : (out << "<null>"));
  out << ", " << "jitter90="; (obj.__isset.jitter90 ? (out << to_string(obj.jitter90)) : (out << "<null>"));
  out << ", " << "lost_ratio="; (obj.__isset.lost_ratio ? (out << to_string(obj.lost_ratio)) : (out << "<null>"));
  out << ", " << "lost_ratio2="; (obj.__isset.lost_ratio2 ? (out << to_string(obj.lost_ratio2)) : (out << "<null>"));
  out << ", " << "lost_ratio3="; (obj.__isset.lost_ratio3 ? (out << to_string(obj.lost_ratio3)) : (out << "<null>"));
  out << ", " << "lts="; (obj.__isset.lts ? (out << to_string(obj.lts)) : (out << "<null>"));
  out << ", " << "sid="; (obj.__isset.sid ? (out << to_string(obj.sid)) : (out << "<null>"));
  out << ")";
  return out;
}

WrtcBrowser2Browser::~WrtcBrowser2Browser() throw() {
}


void WrtcBrowser2Browser::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void WrtcBrowser2Browser::__set_cid(const int64_t val) {
  this->cid = val;
__isset.cid = true;
}

void WrtcBrowser2Browser::__set_uid(const int64_t val) {
  this->uid = val;
__isset.uid = true;
}

void WrtcBrowser2Browser::__set_vos_id(const int32_t val) {
  this->vos_id = val;
__isset.vos_id = true;
}

void WrtcBrowser2Browser::__set_source_ip(const int32_t val) {
  this->source_ip = val;
__isset.source_ip = true;
}

void WrtcBrowser2Browser::__set_source_port(const int16_t val) {
  this->source_port = val;
__isset.source_port = true;
}

void WrtcBrowser2Browser::__set_dest_ip(const int32_t val) {
  this->dest_ip = val;
__isset.dest_ip = true;
}

void WrtcBrowser2Browser::__set_dest_port(const int16_t val) {
  this->dest_port = val;
__isset.dest_port = true;
}

void WrtcBrowser2Browser::__set_delay(const int16_t val) {
  this->delay = val;
__isset.delay = true;
}

void WrtcBrowser2Browser::__set_jitter100(const int16_t val) {
  this->jitter100 = val;
__isset.jitter100 = true;
}

void WrtcBrowser2Browser::__set_jitter95(const int16_t val) {
  this->jitter95 = val;
__isset.jitter95 = true;
}

void WrtcBrowser2Browser::__set_jitter90(const int16_t val) {
  this->jitter90 = val;
__isset.jitter90 = true;
}

void WrtcBrowser2Browser::__set_lost_ratio(const int16_t val) {
  this->lost_ratio = val;
__isset.lost_ratio = true;
}

void WrtcBrowser2Browser::__set_lost_ratio2(const int16_t val) {
  this->lost_ratio2 = val;
__isset.lost_ratio2 = true;
}

void WrtcBrowser2Browser::__set_lost_ratio3(const int16_t val) {
  this->lost_ratio3 = val;
__isset.lost_ratio3 = true;
}

void WrtcBrowser2Browser::__set_lts(const int64_t val) {
  this->lts = val;
__isset.lts = true;
}

void WrtcBrowser2Browser::__set_sid(const std::string& val) {
  this->sid = val;
__isset.sid = true;
}

void WrtcBrowser2Browser::__set_peer_uid(const int32_t val) {
  this->peer_uid = val;
  __isset.peer_uid = true;
}

const char* WrtcBrowser2Browser::ascii_fingerprint = "9781CE987183CEB8AD54063383A546D8";
const uint8_t WrtcBrowser2Browser::binary_fingerprint[16] = {0x97,0x81,0xCE,0x98,0x71,0x83,0xCE,0xB8,0xAD,0x54,0x06,0x33,0x83,0xA5,0x46,0xD8};

uint32_t WrtcBrowser2Browser::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cid);
          this->__isset.cid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vos_id);
          this->__isset.vos_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->source_ip);
          this->__isset.source_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->source_port);
          this->__isset.source_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dest_ip);
          this->__isset.dest_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dest_port);
          this->__isset.dest_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->delay);
          this->__isset.delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter100);
          this->__isset.jitter100 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter95);
          this->__isset.jitter95 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter90);
          this->__isset.jitter90 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio);
          this->__isset.lost_ratio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio2);
          this->__isset.lost_ratio2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio3);
          this->__isset.lost_ratio3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sid);
          this->__isset.sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->peer_uid);
          this->__isset.peer_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcBrowser2Browser::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcBrowser2Browser");

  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cid) {
    xfer += oprot->writeFieldBegin("cid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->cid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vos_id) {
    xfer += oprot->writeFieldBegin("vos_id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->vos_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source_ip) {
    xfer += oprot->writeFieldBegin("source_ip", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->source_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source_port) {
    xfer += oprot->writeFieldBegin("source_port", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->source_port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dest_ip) {
    xfer += oprot->writeFieldBegin("dest_ip", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->dest_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dest_port) {
    xfer += oprot->writeFieldBegin("dest_port", ::apache::thrift::protocol::T_I16, 8);
    xfer += oprot->writeI16(this->dest_port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.delay) {
    xfer += oprot->writeFieldBegin("delay", ::apache::thrift::protocol::T_I16, 9);
    xfer += oprot->writeI16(this->delay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter100) {
    xfer += oprot->writeFieldBegin("jitter100", ::apache::thrift::protocol::T_I16, 10);
    xfer += oprot->writeI16(this->jitter100);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter95) {
    xfer += oprot->writeFieldBegin("jitter95", ::apache::thrift::protocol::T_I16, 11);
    xfer += oprot->writeI16(this->jitter95);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter90) {
    xfer += oprot->writeFieldBegin("jitter90", ::apache::thrift::protocol::T_I16, 12);
    xfer += oprot->writeI16(this->jitter90);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio) {
    xfer += oprot->writeFieldBegin("lost_ratio", ::apache::thrift::protocol::T_I16, 13);
    xfer += oprot->writeI16(this->lost_ratio);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio2) {
    xfer += oprot->writeFieldBegin("lost_ratio2", ::apache::thrift::protocol::T_I16, 14);
    xfer += oprot->writeI16(this->lost_ratio2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio3) {
    xfer += oprot->writeFieldBegin("lost_ratio3", ::apache::thrift::protocol::T_I16, 15);
    xfer += oprot->writeI16(this->lost_ratio3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lts) {
    xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 16);
    xfer += oprot->writeI64(this->lts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sid) {
    xfer += oprot->writeFieldBegin("sid", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->sid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peer_uid) {
    xfer += oprot->writeFieldBegin("peer_uid", ::apache::thrift::protocol::T_I32, 18);
    xfer += oprot->writeI32(this->peer_uid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcBrowser2Browser &a, WrtcBrowser2Browser &b) {
  using ::std::swap;
  swap(a.vid, b.vid);
  swap(a.cid, b.cid);
  swap(a.uid, b.uid);
  swap(a.vos_id, b.vos_id);
  swap(a.source_ip, b.source_ip);
  swap(a.source_port, b.source_port);
  swap(a.dest_ip, b.dest_ip);
  swap(a.dest_port, b.dest_port);
  swap(a.delay, b.delay);
  swap(a.jitter100, b.jitter100);
  swap(a.jitter95, b.jitter95);
  swap(a.jitter90, b.jitter90);
  swap(a.lost_ratio, b.lost_ratio);
  swap(a.lost_ratio2, b.lost_ratio2);
  swap(a.lost_ratio3, b.lost_ratio3);
  swap(a.lts, b.lts);
  swap(a.sid, b.sid);
  swap(a.peer_uid, b.peer_uid);
  swap(a.__isset, b.__isset);
}

WrtcBrowser2Browser::WrtcBrowser2Browser(const WrtcBrowser2Browser& other52) {
  vid = other52.vid;
  cid = other52.cid;
  uid = other52.uid;
  vos_id = other52.vos_id;
  source_ip = other52.source_ip;
  source_port = other52.source_port;
  dest_ip = other52.dest_ip;
  dest_port = other52.dest_port;
  delay = other52.delay;
  jitter100 = other52.jitter100;
  jitter95 = other52.jitter95;
  jitter90 = other52.jitter90;
  lost_ratio = other52.lost_ratio;
  lost_ratio2 = other52.lost_ratio2;
  lost_ratio3 = other52.lost_ratio3;
  lts = other52.lts;
  sid = other52.sid;
  peer_uid = other52.peer_uid;
  __isset = other52.__isset;
}
WrtcBrowser2Browser& WrtcBrowser2Browser::operator=(const WrtcBrowser2Browser& other53) {
  vid = other53.vid;
  cid = other53.cid;
  uid = other53.uid;
  vos_id = other53.vos_id;
  source_ip = other53.source_ip;
  source_port = other53.source_port;
  dest_ip = other53.dest_ip;
  dest_port = other53.dest_port;
  delay = other53.delay;
  jitter100 = other53.jitter100;
  jitter95 = other53.jitter95;
  jitter90 = other53.jitter90;
  lost_ratio = other53.lost_ratio;
  lost_ratio2 = other53.lost_ratio2;
  lost_ratio3 = other53.lost_ratio3;
  lts = other53.lts;
  sid = other53.sid;
  peer_uid = other53.peer_uid;
  __isset = other53.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcBrowser2Browser& obj) {
  using apache::thrift::to_string;
  out << "WrtcBrowser2Browser(";
  out << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "cid="; (obj.__isset.cid ? (out << to_string(obj.cid)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "vos_id="; (obj.__isset.vos_id ? (out << to_string(obj.vos_id)) : (out << "<null>"));
  out << ", " << "source_ip="; (obj.__isset.source_ip ? (out << to_string(obj.source_ip)) : (out << "<null>"));
  out << ", " << "source_port="; (obj.__isset.source_port ? (out << to_string(obj.source_port)) : (out << "<null>"));
  out << ", " << "dest_ip="; (obj.__isset.dest_ip ? (out << to_string(obj.dest_ip)) : (out << "<null>"));
  out << ", " << "dest_port="; (obj.__isset.dest_port ? (out << to_string(obj.dest_port)) : (out << "<null>"));
  out << ", " << "delay="; (obj.__isset.delay ? (out << to_string(obj.delay)) : (out << "<null>"));
  out << ", " << "jitter100="; (obj.__isset.jitter100 ? (out << to_string(obj.jitter100)) : (out << "<null>"));
  out << ", " << "jitter95="; (obj.__isset.jitter95 ? (out << to_string(obj.jitter95)) : (out << "<null>"));
  out << ", " << "jitter90="; (obj.__isset.jitter90 ? (out << to_string(obj.jitter90)) : (out << "<null>"));
  out << ", " << "lost_ratio="; (obj.__isset.lost_ratio ? (out << to_string(obj.lost_ratio)) : (out << "<null>"));
  out << ", " << "lost_ratio2="; (obj.__isset.lost_ratio2 ? (out << to_string(obj.lost_ratio2)) : (out << "<null>"));
  out << ", " << "lost_ratio3="; (obj.__isset.lost_ratio3 ? (out << to_string(obj.lost_ratio3)) : (out << "<null>"));
  out << ", " << "lts="; (obj.__isset.lts ? (out << to_string(obj.lts)) : (out << "<null>"));
  out << ", " << "sid="; (obj.__isset.sid ? (out << to_string(obj.sid)) : (out << "<null>"));
  out << ", " << "peer_uid="; (obj.__isset.peer_uid ? (out << to_string(obj.peer_uid)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcProfile::~WrtcProfile() throw() {
}


void WrtcProfile::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcProfile::__set_framerate(const int16_t val) {
  this->framerate = val;
__isset.framerate = true;
}

void WrtcProfile::__set_bitrate(const int32_t val) {
  this->bitrate = val;
__isset.bitrate = true;
}

void WrtcProfile::__set_width(const int32_t val) {
  this->width = val;
__isset.width = true;
}

void WrtcProfile::__set_height(const int32_t val) {
  this->height = val;
__isset.height = true;
}

const char* WrtcProfile::ascii_fingerprint = "18DF9D190D8E9E00A48E0285B6130426";
const uint8_t WrtcProfile::binary_fingerprint[16] = {0x18,0xDF,0x9D,0x19,0x0D,0x8E,0x9E,0x00,0xA4,0x8E,0x02,0x85,0xB6,0x13,0x04,0x26};

uint32_t WrtcProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->framerate);
          this->__isset.framerate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bitrate);
          this->__isset.bitrate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcProfile");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.framerate) {
    xfer += oprot->writeFieldBegin("framerate", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->framerate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bitrate) {
    xfer += oprot->writeFieldBegin("bitrate", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->bitrate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->width);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->height);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcProfile &a, WrtcProfile &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.framerate, b.framerate);
  swap(a.bitrate, b.bitrate);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.__isset, b.__isset);
}

WrtcProfile::WrtcProfile(const WrtcProfile& other54) {
  header = other54.header;
  framerate = other54.framerate;
  bitrate = other54.bitrate;
  width = other54.width;
  height = other54.height;
  __isset = other54.__isset;
}
WrtcProfile& WrtcProfile::operator=(const WrtcProfile& other55) {
  header = other55.header;
  framerate = other55.framerate;
  bitrate = other55.bitrate;
  width = other55.width;
  height = other55.height;
  __isset = other55.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcProfile& obj) {
  using apache::thrift::to_string;
  out << "WrtcProfile(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "framerate="; (obj.__isset.framerate ? (out << to_string(obj.framerate)) : (out << "<null>"));
  out << ", " << "bitrate="; (obj.__isset.bitrate ? (out << to_string(obj.bitrate)) : (out << "<null>"));
  out << ", " << "width="; (obj.__isset.width ? (out << to_string(obj.width)) : (out << "<null>"));
  out << ", " << "height="; (obj.__isset.height ? (out << to_string(obj.height)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcPubStream::~WrtcPubStream() throw() {
}


void WrtcPubStream::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcPubStream::__set_audio(const bool val) {
  this->audio = val;
__isset.audio = true;
}

void WrtcPubStream::__set_video(const bool val) {
  this->video = val;
__isset.video = true;
}

const char* WrtcPubStream::ascii_fingerprint = "D9ACD16268569EC75DBC65313B619291";
const uint8_t WrtcPubStream::binary_fingerprint[16] = {0xD9,0xAC,0xD1,0x62,0x68,0x56,0x9E,0xC7,0x5D,0xBC,0x65,0x31,0x3B,0x61,0x92,0x91};

uint32_t WrtcPubStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->audio);
          this->__isset.audio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->video);
          this->__isset.video = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcPubStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcPubStream");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.audio) {
    xfer += oprot->writeFieldBegin("audio", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->audio);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.video) {
    xfer += oprot->writeFieldBegin("video", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->video);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcPubStream &a, WrtcPubStream &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.audio, b.audio);
  swap(a.video, b.video);
  swap(a.__isset, b.__isset);
}

WrtcPubStream::WrtcPubStream(const WrtcPubStream& other56) {
  header = other56.header;
  audio = other56.audio;
  video = other56.video;
  __isset = other56.__isset;
}
WrtcPubStream& WrtcPubStream::operator=(const WrtcPubStream& other57) {
  header = other57.header;
  audio = other57.audio;
  video = other57.video;
  __isset = other57.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcPubStream& obj) {
  using apache::thrift::to_string;
  out << "WrtcPubStream(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "audio="; (obj.__isset.audio ? (out << to_string(obj.audio)) : (out << "<null>"));
  out << ", " << "video="; (obj.__isset.video ? (out << to_string(obj.video)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcUnpubStream::~WrtcUnpubStream() throw() {
}


void WrtcUnpubStream::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

const char* WrtcUnpubStream::ascii_fingerprint = "C3D41A67DB60E8E4C8D244D93F311688";
const uint8_t WrtcUnpubStream::binary_fingerprint[16] = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

uint32_t WrtcUnpubStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcUnpubStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcUnpubStream");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcUnpubStream &a, WrtcUnpubStream &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

WrtcUnpubStream::WrtcUnpubStream(const WrtcUnpubStream& other58) {
  header = other58.header;
  __isset = other58.__isset;
}
WrtcUnpubStream& WrtcUnpubStream::operator=(const WrtcUnpubStream& other59) {
  header = other59.header;
  __isset = other59.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcUnpubStream& obj) {
  using apache::thrift::to_string;
  out << "WrtcUnpubStream(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcSubStream::~WrtcSubStream() throw() {
}


void WrtcSubStream::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcSubStream::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

const char* WrtcSubStream::ascii_fingerprint = "1DDE93193DBC99C1A6290B4A983847BB";
const uint8_t WrtcSubStream::binary_fingerprint[16] = {0x1D,0xDE,0x93,0x19,0x3D,0xBC,0x99,0xC1,0xA6,0x29,0x0B,0x4A,0x98,0x38,0x47,0xBB};

uint32_t WrtcSubStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcSubStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcSubStream");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcSubStream &a, WrtcSubStream &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.__isset, b.__isset);
}

WrtcSubStream::WrtcSubStream(const WrtcSubStream& other60) {
  header = other60.header;
  peerUid = other60.peerUid;
  __isset = other60.__isset;
}
WrtcSubStream& WrtcSubStream::operator=(const WrtcSubStream& other61) {
  header = other61.header;
  peerUid = other61.peerUid;
  __isset = other61.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcSubStream& obj) {
  using apache::thrift::to_string;
  out << "WrtcSubStream(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcUnsubStream::~WrtcUnsubStream() throw() {
}


void WrtcUnsubStream::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcUnsubStream::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

const char* WrtcUnsubStream::ascii_fingerprint = "1DDE93193DBC99C1A6290B4A983847BB";
const uint8_t WrtcUnsubStream::binary_fingerprint[16] = {0x1D,0xDE,0x93,0x19,0x3D,0xBC,0x99,0xC1,0xA6,0x29,0x0B,0x4A,0x98,0x38,0x47,0xBB};

uint32_t WrtcUnsubStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcUnsubStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcUnsubStream");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcUnsubStream &a, WrtcUnsubStream &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.__isset, b.__isset);
}

WrtcUnsubStream::WrtcUnsubStream(const WrtcUnsubStream& other62) {
  header = other62.header;
  peerUid = other62.peerUid;
  __isset = other62.__isset;
}
WrtcUnsubStream& WrtcUnsubStream::operator=(const WrtcUnsubStream& other63) {
  header = other63.header;
  peerUid = other63.peerUid;
  __isset = other63.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcUnsubStream& obj) {
  using apache::thrift::to_string;
  out << "WrtcUnsubStream(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcEventsSequenceItem::~WrtcEventsSequenceItem() throw() {
}


void WrtcEventsSequenceItem::__set_n(const std::string& val) {
  this->n = val;
}

void WrtcEventsSequenceItem::__set_succ(const bool val) {
  this->succ = val;
}

void WrtcEventsSequenceItem::__set_lts(const int64_t val) {
  this->lts = val;
__isset.lts = true;
}

void WrtcEventsSequenceItem::__set_elps(const int32_t val) {
  this->elps = val;
__isset.elps = true;
}

void WrtcEventsSequenceItem::__set_ec(const std::string& val) {
  this->ec = val;
__isset.ec = true;
}

void WrtcEventsSequenceItem::__set_addl_s1(const std::string& val) {
  this->addl_s1 = val;
__isset.addl_s1 = true;
}

void WrtcEventsSequenceItem::__set_addl_s2(const std::string& val) {
  this->addl_s2 = val;
__isset.addl_s2 = true;
}

void WrtcEventsSequenceItem::__set_addl_i1(const int64_t val) {
  this->addl_i1 = val;
__isset.addl_i1 = true;
}

void WrtcEventsSequenceItem::__set_addl_i2(const int64_t val) {
  this->addl_i2 = val;
__isset.addl_i2 = true;
}

void WrtcEventsSequenceItem::__set_addl_i3(const int32_t val) {
  this->addl_i3 = val;
__isset.addl_i3 = true;
}

void WrtcEventsSequenceItem::__set_addl_i4(const int32_t val) {
  this->addl_i4 = val;
__isset.addl_i4 = true;
}

const char* WrtcEventsSequenceItem::ascii_fingerprint = "0D0E9FB86B5B0C9C91E984F196721B3F";
const uint8_t WrtcEventsSequenceItem::binary_fingerprint[16] = {0x0D,0x0E,0x9F,0xB8,0x6B,0x5B,0x0C,0x9C,0x91,0xE9,0x84,0xF1,0x96,0x72,0x1B,0x3F};

uint32_t WrtcEventsSequenceItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_n = false;
  bool isset_succ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->n);
          isset_n = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succ);
          isset_succ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->elps);
          this->__isset.elps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ec);
          this->__isset.ec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->addl_s1);
          this->__isset.addl_s1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->addl_s2);
          this->__isset.addl_s2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->addl_i1);
          this->__isset.addl_i1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->addl_i2);
          this->__isset.addl_i2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->addl_i3);
          this->__isset.addl_i3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->addl_i4);
          this->__isset.addl_i4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  /*if (!isset_n)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_succ)
    throw TProtocolException(TProtocolException::INVALID_DATA);*/
  return xfer;
}

uint32_t WrtcEventsSequenceItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcEventsSequenceItem");

  xfer += oprot->writeFieldBegin("n", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->n);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("succ", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->succ);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.lts) {
    xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->lts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.elps) {
    xfer += oprot->writeFieldBegin("elps", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->elps);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ec) {
    xfer += oprot->writeFieldBegin("ec", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->ec);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.addl_s1) {
    xfer += oprot->writeFieldBegin("addl_s1", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->addl_s1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.addl_s2) {
    xfer += oprot->writeFieldBegin("addl_s2", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->addl_s2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.addl_i1) {
    xfer += oprot->writeFieldBegin("addl_i1", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->addl_i1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.addl_i2) {
    xfer += oprot->writeFieldBegin("addl_i2", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->addl_i2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.addl_i3) {
    xfer += oprot->writeFieldBegin("addl_i3", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->addl_i3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.addl_i4) {
    xfer += oprot->writeFieldBegin("addl_i4", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->addl_i4);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcEventsSequenceItem &a, WrtcEventsSequenceItem &b) {
  using ::std::swap;
  swap(a.n, b.n);
  swap(a.succ, b.succ);
  swap(a.lts, b.lts);
  swap(a.elps, b.elps);
  swap(a.ec, b.ec);
  swap(a.addl_s1, b.addl_s1);
  swap(a.addl_s2, b.addl_s2);
  swap(a.addl_i1, b.addl_i1);
  swap(a.addl_i2, b.addl_i2);
  swap(a.addl_i3, b.addl_i3);
  swap(a.addl_i4, b.addl_i4);
  swap(a.__isset, b.__isset);
}

WrtcEventsSequenceItem::WrtcEventsSequenceItem(const WrtcEventsSequenceItem& other64) {
  n = other64.n;
  succ = other64.succ;
  lts = other64.lts;
  elps = other64.elps;
  ec = other64.ec;
  addl_s1 = other64.addl_s1;
  addl_s2 = other64.addl_s2;
  addl_i1 = other64.addl_i1;
  addl_i2 = other64.addl_i2;
  addl_i3 = other64.addl_i3;
  addl_i4 = other64.addl_i4;
  __isset = other64.__isset;
}
WrtcEventsSequenceItem& WrtcEventsSequenceItem::operator=(const WrtcEventsSequenceItem& other65) {
  n = other65.n;
  succ = other65.succ;
  lts = other65.lts;
  elps = other65.elps;
  ec = other65.ec;
  addl_s1 = other65.addl_s1;
  addl_s2 = other65.addl_s2;
  addl_i1 = other65.addl_i1;
  addl_i2 = other65.addl_i2;
  addl_i3 = other65.addl_i3;
  addl_i4 = other65.addl_i4;
  __isset = other65.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcEventsSequenceItem& obj) {
  using apache::thrift::to_string;
  out << "WrtcEventsSequenceItem(";
  out << "n=" << to_string(obj.n);
  out << ", " << "succ=" << to_string(obj.succ);
  out << ", " << "lts="; (obj.__isset.lts ? (out << to_string(obj.lts)) : (out << "<null>"));
  out << ", " << "elps="; (obj.__isset.elps ? (out << to_string(obj.elps)) : (out << "<null>"));
  out << ", " << "ec="; (obj.__isset.ec ? (out << to_string(obj.ec)) : (out << "<null>"));
  out << ", " << "addl_s1="; (obj.__isset.addl_s1 ? (out << to_string(obj.addl_s1)) : (out << "<null>"));
  out << ", " << "addl_s2="; (obj.__isset.addl_s2 ? (out << to_string(obj.addl_s2)) : (out << "<null>"));
  out << ", " << "addl_i1="; (obj.__isset.addl_i1 ? (out << to_string(obj.addl_i1)) : (out << "<null>"));
  out << ", " << "addl_i2="; (obj.__isset.addl_i2 ? (out << to_string(obj.addl_i2)) : (out << "<null>"));
  out << ", " << "addl_i3="; (obj.__isset.addl_i3 ? (out << to_string(obj.addl_i3)) : (out << "<null>"));
  out << ", " << "addl_i4="; (obj.__isset.addl_i4 ? (out << to_string(obj.addl_i4)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcEventsSequence::~WrtcEventsSequence() throw() {
}


void WrtcEventsSequence::__set_succ(const bool val) {
  this->succ = val;
}

void WrtcEventsSequence::__set_lts(const int64_t val) {
  this->lts = val;
__isset.lts = true;
}

void WrtcEventsSequence::__set_elps(const int32_t val) {
  this->elps = val;
__isset.elps = true;
}

void WrtcEventsSequence::__set_events(const std::vector<WrtcEventsSequenceItem> & val) {
  this->events = val;
}

void WrtcEventsSequence::__set_appid(const std::string& val) {
  this->appid = val;
__isset.appid = true;
}

void WrtcEventsSequence::__set_ver(const std::string& val) {
  this->ver = val;
__isset.ver = true;
}

void WrtcEventsSequence::__set_brwsr(const std::string& val) {
  this->brwsr = val;
__isset.brwsr = true;
}

void WrtcEventsSequence::__set_prev_e(const WrtcEventsSequenceItem& val) {
  this->prev_e = val;
__isset.prev_e = true;
}

const char* WrtcEventsSequence::ascii_fingerprint = "C294A17FD1B35AEF35BFC13F92D33E61";
const uint8_t WrtcEventsSequence::binary_fingerprint[16] = {0xC2,0x94,0xA1,0x7F,0xD1,0xB3,0x5A,0xEF,0x35,0xBF,0xC1,0x3F,0x92,0xD3,0x3E,0x61};

uint32_t WrtcEventsSequence::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_succ = false;
  bool isset_events = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succ);
          isset_succ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->elps);
          this->__isset.elps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size66;
            ::apache::thrift::protocol::TType _etype69;
            xfer += iprot->readListBegin(_etype69, _size66);
            this->events.resize(_size66);
            uint32_t _i70;
            for (_i70 = 0; _i70 < _size66; ++_i70)
            {
              xfer += this->events[_i70].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appid);
          this->__isset.appid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ver);
          this->__isset.ver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->brwsr);
          this->__isset.brwsr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->prev_e.read(iprot);
          this->__isset.prev_e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  /*if (!isset_succ)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_events)
    throw TProtocolException(TProtocolException::INVALID_DATA);*/
  return xfer;
}

uint32_t WrtcEventsSequence::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcEventsSequence");

  xfer += oprot->writeFieldBegin("succ", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->succ);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.lts) {
    xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->lts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.elps) {
    xfer += oprot->writeFieldBegin("elps", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->elps);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::vector<WrtcEventsSequenceItem> ::const_iterator _iter71;
    for (_iter71 = this->events.begin(); _iter71 != this->events.end(); ++_iter71)
    {
      xfer += (*_iter71).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.appid) {
    xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->appid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ver) {
    xfer += oprot->writeFieldBegin("ver", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->ver);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.brwsr) {
    xfer += oprot->writeFieldBegin("brwsr", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->brwsr);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.prev_e) {
    xfer += oprot->writeFieldBegin("prev_e", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->prev_e.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcEventsSequence &a, WrtcEventsSequence &b) {
  using ::std::swap;
  swap(a.succ, b.succ);
  swap(a.lts, b.lts);
  swap(a.elps, b.elps);
  swap(a.events, b.events);
  swap(a.appid, b.appid);
  swap(a.ver, b.ver);
  swap(a.brwsr, b.brwsr);
  swap(a.prev_e, b.prev_e);
  swap(a.__isset, b.__isset);
}

WrtcEventsSequence::WrtcEventsSequence(const WrtcEventsSequence& other72) {
  succ = other72.succ;
  lts = other72.lts;
  elps = other72.elps;
  events = other72.events;
  appid = other72.appid;
  ver = other72.ver;
  brwsr = other72.brwsr;
  prev_e = other72.prev_e;
  __isset = other72.__isset;
}
WrtcEventsSequence& WrtcEventsSequence::operator=(const WrtcEventsSequence& other73) {
  succ = other73.succ;
  lts = other73.lts;
  elps = other73.elps;
  events = other73.events;
  appid = other73.appid;
  ver = other73.ver;
  brwsr = other73.brwsr;
  prev_e = other73.prev_e;
  __isset = other73.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcEventsSequence& obj) {
  using apache::thrift::to_string;
  out << "WrtcEventsSequence(";
  out << "succ=" << to_string(obj.succ);
  out << ", " << "lts="; (obj.__isset.lts ? (out << to_string(obj.lts)) : (out << "<null>"));
  out << ", " << "elps="; (obj.__isset.elps ? (out << to_string(obj.elps)) : (out << "<null>"));
  out << ", " << "events=" << to_string(obj.events);
  out << ", " << "appid="; (obj.__isset.appid ? (out << to_string(obj.appid)) : (out << "<null>"));
  out << ", " << "ver="; (obj.__isset.ver ? (out << to_string(obj.ver)) : (out << "<null>"));
  out << ", " << "brwsr="; (obj.__isset.brwsr ? (out << to_string(obj.brwsr)) : (out << "<null>"));
  out << ", " << "prev_e="; (obj.__isset.prev_e ? (out << to_string(obj.prev_e)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcReceiverReport::~WrtcReceiverReport() throw() {
}


void WrtcReceiverReport::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcReceiverReport::__set_sourceSsrc(const int64_t val) {
  this->sourceSsrc = val;
__isset.sourceSsrc = true;
}

void WrtcReceiverReport::__set_fractionLost(const int64_t val) {
  this->fractionLost = val;
__isset.fractionLost = true;
}

void WrtcReceiverReport::__set_cumulativeLost(const int64_t val) {
  this->cumulativeLost = val;
__isset.cumulativeLost = true;
}

void WrtcReceiverReport::__set_highestSeqNumber(const int64_t val) {
  this->highestSeqNumber = val;
__isset.highestSeqNumber = true;
}

void WrtcReceiverReport::__set_jitter(const int64_t val) {
  this->jitter = val;
__isset.jitter = true;
}

void WrtcReceiverReport::__set_lsr(const int64_t val) {
  this->lsr = val;
__isset.lsr = true;
}

void WrtcReceiverReport::__set_dlsr(const int64_t val) {
  this->dlsr = val;
__isset.dlsr = true;
}

void WrtcReceiverReport::__set_vid(const int64_t val) {
  this->vid = val;
__isset.vid = true;
}

const char* WrtcReceiverReport::ascii_fingerprint = "1EAAE573E18033C1DE5B85F0FD26C77A";
const uint8_t WrtcReceiverReport::binary_fingerprint[16] = {0x1E,0xAA,0xE5,0x73,0xE1,0x80,0x33,0xC1,0xDE,0x5B,0x85,0xF0,0xFD,0x26,0xC7,0x7A};

uint32_t WrtcReceiverReport::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sourceSsrc);
          this->__isset.sourceSsrc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fractionLost);
          this->__isset.fractionLost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cumulativeLost);
          this->__isset.cumulativeLost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->highestSeqNumber);
          this->__isset.highestSeqNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->jitter);
          this->__isset.jitter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lsr);
          this->__isset.lsr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dlsr);
          this->__isset.dlsr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcReceiverReport::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcReceiverReport");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceSsrc) {
    xfer += oprot->writeFieldBegin("sourceSsrc", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->sourceSsrc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fractionLost) {
    xfer += oprot->writeFieldBegin("fractionLost", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->fractionLost);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cumulativeLost) {
    xfer += oprot->writeFieldBegin("cumulativeLost", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->cumulativeLost);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.highestSeqNumber) {
    xfer += oprot->writeFieldBegin("highestSeqNumber", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->highestSeqNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter) {
    xfer += oprot->writeFieldBegin("jitter", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->jitter);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lsr) {
    xfer += oprot->writeFieldBegin("lsr", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->lsr);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dlsr) {
    xfer += oprot->writeFieldBegin("dlsr", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->dlsr);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcReceiverReport &a, WrtcReceiverReport &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.sourceSsrc, b.sourceSsrc);
  swap(a.fractionLost, b.fractionLost);
  swap(a.cumulativeLost, b.cumulativeLost);
  swap(a.highestSeqNumber, b.highestSeqNumber);
  swap(a.jitter, b.jitter);
  swap(a.lsr, b.lsr);
  swap(a.dlsr, b.dlsr);
  swap(a.vid, b.vid);
  swap(a.__isset, b.__isset);
}

WrtcReceiverReport::WrtcReceiverReport(const WrtcReceiverReport& other74) {
  header = other74.header;
  sourceSsrc = other74.sourceSsrc;
  fractionLost = other74.fractionLost;
  cumulativeLost = other74.cumulativeLost;
  highestSeqNumber = other74.highestSeqNumber;
  jitter = other74.jitter;
  lsr = other74.lsr;
  dlsr = other74.dlsr;
  vid = other74.vid;
  __isset = other74.__isset;
}
WrtcReceiverReport& WrtcReceiverReport::operator=(const WrtcReceiverReport& other75) {
  header = other75.header;
  sourceSsrc = other75.sourceSsrc;
  fractionLost = other75.fractionLost;
  cumulativeLost = other75.cumulativeLost;
  highestSeqNumber = other75.highestSeqNumber;
  jitter = other75.jitter;
  lsr = other75.lsr;
  dlsr = other75.dlsr;
  vid = other75.vid;
  __isset = other75.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcReceiverReport& obj) {
  using apache::thrift::to_string;
  out << "WrtcReceiverReport(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "sourceSsrc="; (obj.__isset.sourceSsrc ? (out << to_string(obj.sourceSsrc)) : (out << "<null>"));
  out << ", " << "fractionLost="; (obj.__isset.fractionLost ? (out << to_string(obj.fractionLost)) : (out << "<null>"));
  out << ", " << "cumulativeLost="; (obj.__isset.cumulativeLost ? (out << to_string(obj.cumulativeLost)) : (out << "<null>"));
  out << ", " << "highestSeqNumber="; (obj.__isset.highestSeqNumber ? (out << to_string(obj.highestSeqNumber)) : (out << "<null>"));
  out << ", " << "jitter="; (obj.__isset.jitter ? (out << to_string(obj.jitter)) : (out << "<null>"));
  out << ", " << "lsr="; (obj.__isset.lsr ? (out << to_string(obj.lsr)) : (out << "<null>"));
  out << ", " << "dlsr="; (obj.__isset.dlsr ? (out << to_string(obj.dlsr)) : (out << "<null>"));
  out << ", " << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcGateway2Browser::~WrtcGateway2Browser() throw() {
}


void WrtcGateway2Browser::__set_sid(const std::string& val) {
  this->sid = val;
__isset.sid = true;
}

void WrtcGateway2Browser::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void WrtcGateway2Browser::__set_cid(const int64_t val) {
  this->cid = val;
__isset.cid = true;
}

void WrtcGateway2Browser::__set_uid(const int64_t val) {
  this->uid = val;
__isset.uid = true;
}

void WrtcGateway2Browser::__set_spkUid(const int64_t val) {
  this->spkUid = val;
__isset.spkUid = true;
}

void WrtcGateway2Browser::__set_delay(const int16_t val) {
  this->delay = val;
__isset.delay = true;
}

void WrtcGateway2Browser::__set_jitter(const int16_t val) {
  this->jitter = val;
__isset.jitter = true;
}

void WrtcGateway2Browser::__set_lost(const int16_t val) {
  this->lost = val;
__isset.lost = true;
}

const char* WrtcGateway2Browser::ascii_fingerprint = "5845D7A2C26F69481939787D26D75AB0";
const uint8_t WrtcGateway2Browser::binary_fingerprint[16] = {0x58,0x45,0xD7,0xA2,0xC2,0x6F,0x69,0x48,0x19,0x39,0x78,0x7D,0x26,0xD7,0x5A,0xB0};

uint32_t WrtcGateway2Browser::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sid);
          this->__isset.sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cid);
          this->__isset.cid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spkUid);
          this->__isset.spkUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->delay);
          this->__isset.delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter);
          this->__isset.jitter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost);
          this->__isset.lost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcGateway2Browser::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcGateway2Browser");

  if (this->__isset.sid) {
    xfer += oprot->writeFieldBegin("sid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->sid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cid) {
    xfer += oprot->writeFieldBegin("cid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->cid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spkUid) {
    xfer += oprot->writeFieldBegin("spkUid", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->spkUid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.delay) {
    xfer += oprot->writeFieldBegin("delay", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->delay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter) {
    xfer += oprot->writeFieldBegin("jitter", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->jitter);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost) {
    xfer += oprot->writeFieldBegin("lost", ::apache::thrift::protocol::T_I16, 8);
    xfer += oprot->writeI16(this->lost);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcGateway2Browser &a, WrtcGateway2Browser &b) {
  using ::std::swap;
  swap(a.sid, b.sid);
  swap(a.vid, b.vid);
  swap(a.cid, b.cid);
  swap(a.uid, b.uid);
  swap(a.spkUid, b.spkUid);
  swap(a.delay, b.delay);
  swap(a.jitter, b.jitter);
  swap(a.lost, b.lost);
  swap(a.__isset, b.__isset);
}

WrtcGateway2Browser::WrtcGateway2Browser(const WrtcGateway2Browser& other76) {
  sid = other76.sid;
  vid = other76.vid;
  cid = other76.cid;
  uid = other76.uid;
  spkUid = other76.spkUid;
  delay = other76.delay;
  jitter = other76.jitter;
  lost = other76.lost;
  __isset = other76.__isset;
}
WrtcGateway2Browser& WrtcGateway2Browser::operator=(const WrtcGateway2Browser& other77) {
  sid = other77.sid;
  vid = other77.vid;
  cid = other77.cid;
  uid = other77.uid;
  spkUid = other77.spkUid;
  delay = other77.delay;
  jitter = other77.jitter;
  lost = other77.lost;
  __isset = other77.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcGateway2Browser& obj) {
  using apache::thrift::to_string;
  out << "WrtcGateway2Browser(";
  out << "sid="; (obj.__isset.sid ? (out << to_string(obj.sid)) : (out << "<null>"));
  out << ", " << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "cid="; (obj.__isset.cid ? (out << to_string(obj.cid)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "spkUid="; (obj.__isset.spkUid ? (out << to_string(obj.spkUid)) : (out << "<null>"));
  out << ", " << "delay="; (obj.__isset.delay ? (out << to_string(obj.delay)) : (out << "<null>"));
  out << ", " << "jitter="; (obj.__isset.jitter ? (out << to_string(obj.jitter)) : (out << "<null>"));
  out << ", " << "lost="; (obj.__isset.lost ? (out << to_string(obj.lost)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcStreamControl::~WrtcStreamControl() throw() {
}


void WrtcStreamControl::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcStreamControl::__set_operation(const std::string& val) {
  this->operation = val;
__isset.operation = true;
}

void WrtcStreamControl::__set_streamUid(const int64_t val) {
  this->streamUid = val;
__isset.streamUid = true;
}

const char* WrtcStreamControl::ascii_fingerprint = "FD3B6AFBADCA9A950CCC783D00D1379A";
const uint8_t WrtcStreamControl::binary_fingerprint[16] = {0xFD,0x3B,0x6A,0xFB,0xAD,0xCA,0x9A,0x95,0x0C,0xCC,0x78,0x3D,0x00,0xD1,0x37,0x9A};

uint32_t WrtcStreamControl::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operation);
          this->__isset.operation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->streamUid);
          this->__isset.streamUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcStreamControl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcStreamControl");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operation) {
    xfer += oprot->writeFieldBegin("operation", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->operation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.streamUid) {
    xfer += oprot->writeFieldBegin("streamUid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->streamUid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcStreamControl &a, WrtcStreamControl &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.operation, b.operation);
  swap(a.streamUid, b.streamUid);
  swap(a.__isset, b.__isset);
}

WrtcStreamControl::WrtcStreamControl(const WrtcStreamControl& other78) {
  header = other78.header;
  operation = other78.operation;
  streamUid = other78.streamUid;
  __isset = other78.__isset;
}
WrtcStreamControl& WrtcStreamControl::operator=(const WrtcStreamControl& other79) {
  header = other79.header;
  operation = other79.operation;
  streamUid = other79.streamUid;
  __isset = other79.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcStreamControl& obj) {
  using apache::thrift::to_string;
  out << "WrtcStreamControl(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "operation="; (obj.__isset.operation ? (out << to_string(obj.operation)) : (out << "<null>"));
  out << ", " << "streamUid="; (obj.__isset.streamUid ? (out << to_string(obj.streamUid)) : (out << "<null>"));
  out << ")";
  return out;
}

WrtcConnectProxyTurnWorker::~WrtcConnectProxyTurnWorker() throw() {
}


void WrtcConnectProxyTurnWorker::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcConnectProxyTurnWorker::__set_clientAddr(const std::string& val) {
  this->clientAddr = val;
__isset.clientAddr = true;
}

void WrtcConnectProxyTurnWorker::__set_userCount(const int64_t val) {
  this->userCount = val;
__isset.userCount = true;
}

void WrtcConnectProxyTurnWorker::__set_ingress(const int64_t val) {
  this->ingress = val;
__isset.ingress = true;
}

void WrtcConnectProxyTurnWorker::__set_egress(const int64_t val) {
  this->egress = val;
__isset.egress = true;
}

void WrtcConnectProxyTurnWorker::__set_extend(const std::string& val) {
  this->extend = val;
__isset.extend = true;
}

const char* WrtcConnectProxyTurnWorker::ascii_fingerprint = "FD3B6AFBADCA9A950CCC783D00D1379A";
const uint8_t WrtcConnectProxyTurnWorker::binary_fingerprint[16] = {0xFD,0x3B,0x6A,0xFB,0xAD,0xCA,0x9A,0x95,0x0C,0xCC,0x78,0x3D,0x00,0xD1,0x37,0x9A};

uint32_t WrtcConnectProxyTurnWorker::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientAddr);
          this->__isset.clientAddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->userCount);
          this->__isset.userCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ingress);
          this->__isset.ingress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->egress);
          this->__isset.egress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extend);
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcConnectProxyTurnWorker::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcConnectProxyTurnWorker");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clientAddr) {
    xfer += oprot->writeFieldBegin("clientAddr", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->clientAddr);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userCount) {
    xfer += oprot->writeFieldBegin("userCount", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->userCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ingress) {
    xfer += oprot->writeFieldBegin("ingress", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->ingress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.egress) {
    xfer += oprot->writeFieldBegin("egress", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->egress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->extend);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcConnectProxyTurnWorker &a, WrtcConnectProxyTurnWorker &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.clientAddr, b.clientAddr);
  swap(a.userCount, b.userCount);
  swap(a.ingress, b.ingress);
  swap(a.egress, b.egress);
  swap(a.extend, b.extend);
  swap(a.__isset, b.__isset);
}

WrtcConnectProxyTurnWorker::WrtcConnectProxyTurnWorker(const WrtcConnectProxyTurnWorker& other80) {
  header = other80.header;
  clientAddr = other80.clientAddr;
  userCount = other80.userCount;
  ingress = other80.ingress;
  egress = other80.egress;
  extend = other80.extend;
  __isset = other80.__isset;
}
WrtcConnectProxyTurnWorker& WrtcConnectProxyTurnWorker::operator=(const WrtcConnectProxyTurnWorker& other81) {
  header = other81.header;
  clientAddr = other81.clientAddr;
  userCount = other81.userCount;
  ingress = other81.ingress;
  egress = other81.egress;
  extend = other81.extend;
  __isset = other81.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcConnectProxyTurnWorker& obj) {
  using apache::thrift::to_string;
  out << "WrtcConnectProxyTurnWorker(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "clientAddr="; (obj.__isset.clientAddr ? (out << to_string(obj.clientAddr)) : (out << "<null>"));
  out << ", " << "userCount="; (obj.__isset.userCount ? (out << to_string(obj.userCount)) : (out << "<null>"));
  out << ", " << "ingress="; (obj.__isset.ingress ? (out << to_string(obj.ingress)) : (out << "<null>"));
  out << ", " << "egress="; (obj.__isset.egress ? (out << to_string(obj.egress)) : (out << "<null>"));
  out << ", " << "extend="; (obj.__isset.extend ? (out << to_string(obj.extend)) : (out << "<null>"));
  out << ")";
  return out;
}

ReportItem::~ReportItem() throw() {
}


void ReportItem::__set_uri(const int32_t val) {
  this->uri = val;
}

void ReportItem::__set_encryptedItem(const EncryptedItem& val) {
  this->encryptedItem = val;
__isset.encryptedItem = true;
}

void ReportItem::__set_vosdkCounter(const VosdkCounter& val) {
  this->vosdkCounter = val;
__isset.vosdkCounter = true;
}

void ReportItem::__set_vosdkSession(const VosdkSession& val) {
  this->vosdkSession = val;
__isset.vosdkSession = true;
}

void ReportItem::__set_vosdkVocs(const VosdkVocs& val) {
  this->vosdkVocs = val;
__isset.vosdkVocs = true;
}

void ReportItem::__set_vosdkVos(const VosdkVos& val) {
  this->vosdkVos = val;
__isset.vosdkVos = true;
}

void ReportItem::__set_vosdkWebQuit(const VosdkWebQuit& val) {
  this->vosdkWebQuit = val;
__isset.vosdkWebQuit = true;
}

void ReportItem::__set_wrtcBrowser2Gateway(const WrtcBrowser2Gateway& val) {
  this->wrtcBrowser2Gateway = val;
__isset.wrtcBrowser2Gateway = true;
}

void ReportItem::__set_wrtcBrowser2GatewayVideo(const WrtcBrowser2Gateway& val) {
  this->wrtcBrowser2GatewayVideo = val;
__isset.wrtcBrowser2GatewayVideo = true;
}

void ReportItem::__set_wrtcBrowser2BrowserAudio(const WrtcBrowser2Browser& val) {
  this->wrtcBrowser2BrowserAudio = val;
__isset.wrtcBrowser2BrowserAudio = true;
}

void ReportItem::__set_wrtcBrowser2BrowserVideo(const WrtcBrowser2Browser& val) {
  this->wrtcBrowser2BrowserVideo = val;
__isset.wrtcBrowser2BrowserVideo = true;
}

void ReportItem::__set_wrtcProfile(const WrtcProfile& val) {
  this->wrtcProfile = val;
__isset.wrtcProfile = true;
}

void ReportItem::__set_wrtcPubStream(const WrtcPubStream& val) {
  this->wrtcPubStream = val;
__isset.wrtcPubStream = true;
}

void ReportItem::__set_wrtcUnpubStream(const WrtcUnpubStream& val) {
  this->wrtcUnpubStream = val;
__isset.wrtcUnpubStream = true;
}

void ReportItem::__set_wrtcSubStream(const WrtcSubStream& val) {
  this->wrtcSubStream = val;
__isset.wrtcSubStream = true;
}

void ReportItem::__set_wrtcUnsubStream(const WrtcUnsubStream& val) {
  this->wrtcUnsubStream = val;
__isset.wrtcUnsubStream = true;
}

void ReportItem::__set_wrtcEventsSequence(const WrtcEventsSequence& val) {
  this->wrtcEventsSequence = val;
__isset.wrtcEventsSequence = true;
}

void ReportItem::__set_wrtcReceiverReport(const WrtcReceiverReport& val) {
  this->wrtcReceiverReport = val;
__isset.wrtcReceiverReport = true;
}

void ReportItem::__set_wrtcGateway2Browser(const WrtcGateway2Browser& val) {
  this->wrtcGateway2Browser = val;
__isset.wrtcGateway2Browser = true;
}

void ReportItem::__set_wrtcStreamControl(const WrtcStreamControl& val) {
  this->wrtcStreamControl = val;
__isset.wrtcStreamControl = true;
}

void ReportItem::__set_wrtcConnectProxyTurnWorker(const WrtcConnectProxyTurnWorker& val) {
  this->wrtcConnectProxyTurnWorker = val;
__isset.wrtcConnectProxyTurnWorker = true;
}


const char* ReportItem::ascii_fingerprint = "5E764322CB88C7EA1E151C741866208E";
const uint8_t ReportItem::binary_fingerprint[16] = {0x5E,0x76,0x43,0x22,0xCB,0x88,0xC7,0xEA,0x1E,0x15,0x1C,0x74,0x18,0x66,0x20,0x8E};

uint32_t ReportItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 900:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->encryptedItem.read(iprot);
          this->__isset.encryptedItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1000:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkCounter.read(iprot);
          this->__isset.vosdkCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1001:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkSession.read(iprot);
          this->__isset.vosdkSession = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1002:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVocs.read(iprot);
          this->__isset.vosdkVocs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1003:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVos.read(iprot);
          this->__isset.vosdkVos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1029:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkWebQuit.read(iprot);
          this->__isset.vosdkWebQuit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2001:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcBrowser2Gateway.read(iprot);
          this->__isset.wrtcBrowser2Gateway = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2002:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcProfile.read(iprot);
          this->__isset.wrtcProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2003:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcPubStream.read(iprot);
          this->__isset.wrtcPubStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2004:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcUnpubStream.read(iprot);
          this->__isset.wrtcUnpubStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2005:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcSubStream.read(iprot);
          this->__isset.wrtcSubStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2006:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcUnsubStream.read(iprot);
          this->__isset.wrtcUnsubStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2008:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcEventsSequence.read(iprot);
          this->__isset.wrtcEventsSequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2009:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcReceiverReport.read(iprot);
          this->__isset.wrtcReceiverReport = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2010:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcGateway2Browser.read(iprot);
          this->__isset.wrtcGateway2Browser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2011:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcStreamControl.read(iprot);
          this->__isset.wrtcStreamControl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2021:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcBrowser2GatewayVideo.read(iprot);
          this->__isset.wrtcBrowser2GatewayVideo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2022:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcBrowser2BrowserAudio.read(iprot);
          this->__isset.wrtcBrowser2BrowserAudio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2023:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcBrowser2BrowserVideo.read(iprot);
          this->__isset.wrtcBrowser2BrowserVideo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2026:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcConnectProxyTurnWorker.read(iprot);
          this->__isset.wrtcConnectProxyTurnWorker = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReportItem");

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uri);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.encryptedItem) {
    xfer += oprot->writeFieldBegin("encryptedItem", ::apache::thrift::protocol::T_STRUCT, 900);
    xfer += this->encryptedItem.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkCounter) {
    xfer += oprot->writeFieldBegin("vosdkCounter", ::apache::thrift::protocol::T_STRUCT, 1000);
    xfer += this->vosdkCounter.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkSession) {
    xfer += oprot->writeFieldBegin("vosdkSession", ::apache::thrift::protocol::T_STRUCT, 1001);
    xfer += this->vosdkSession.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVocs) {
    xfer += oprot->writeFieldBegin("vosdkVocs", ::apache::thrift::protocol::T_STRUCT, 1002);
    xfer += this->vosdkVocs.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVos) {
    xfer += oprot->writeFieldBegin("vosdkVos", ::apache::thrift::protocol::T_STRUCT, 1003);
    xfer += this->vosdkVos.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkWebQuit) {
    xfer += oprot->writeFieldBegin("vosdkWebQuit", ::apache::thrift::protocol::T_STRUCT, 1029);
    xfer += this->vosdkWebQuit.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcBrowser2Gateway) {
    xfer += oprot->writeFieldBegin("wrtcBrowser2Gateway", ::apache::thrift::protocol::T_STRUCT, 2001);
    xfer += this->wrtcBrowser2Gateway.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcBrowser2GatewayVideo) {
    xfer += oprot->writeFieldBegin("wrtcBrowser2GatewayVideo", ::apache::thrift::protocol::T_STRUCT, 2021);
    xfer += this->wrtcBrowser2GatewayVideo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcBrowser2BrowserAudio) {
    xfer += oprot->writeFieldBegin("wrtcBrowser2BrowserAudio", ::apache::thrift::protocol::T_STRUCT, 2022);
    xfer += this->wrtcBrowser2BrowserAudio.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcBrowser2BrowserVideo) {
    xfer += oprot->writeFieldBegin("wrtcBrowser2BrowserVideo", ::apache::thrift::protocol::T_STRUCT, 2023);
    xfer += this->wrtcBrowser2BrowserVideo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcProfile) {
    xfer += oprot->writeFieldBegin("wrtcProfile", ::apache::thrift::protocol::T_STRUCT, 2002);
    xfer += this->wrtcProfile.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcPubStream) {
    xfer += oprot->writeFieldBegin("wrtcPubStream", ::apache::thrift::protocol::T_STRUCT, 2003);
    xfer += this->wrtcPubStream.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcUnpubStream) {
    xfer += oprot->writeFieldBegin("wrtcUnpubStream", ::apache::thrift::protocol::T_STRUCT, 2004);
    xfer += this->wrtcUnpubStream.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcSubStream) {
    xfer += oprot->writeFieldBegin("wrtcSubStream", ::apache::thrift::protocol::T_STRUCT, 2005);
    xfer += this->wrtcSubStream.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcUnsubStream) {
    xfer += oprot->writeFieldBegin("wrtcUnsubStream", ::apache::thrift::protocol::T_STRUCT, 2006);
    xfer += this->wrtcUnsubStream.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcEventsSequence) {
    xfer += oprot->writeFieldBegin("wrtcEventsSequence", ::apache::thrift::protocol::T_STRUCT, 2008);
    xfer += this->wrtcEventsSequence.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcReceiverReport) {
    xfer += oprot->writeFieldBegin("wrtcReceiverReport", ::apache::thrift::protocol::T_STRUCT, 2009);
    xfer += this->wrtcReceiverReport.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcGateway2Browser) {
    xfer += oprot->writeFieldBegin("wrtcGateway2Browser", ::apache::thrift::protocol::T_STRUCT, 2010);
    xfer += this->wrtcGateway2Browser.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcStreamControl) {
    xfer += oprot->writeFieldBegin("wrtcStreamControl", ::apache::thrift::protocol::T_STRUCT, 2011);
    xfer += this->wrtcStreamControl.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcConnectProxyTurnWorker) {
    xfer += oprot->writeFieldBegin("wrtcConnectProxyTurnWorker", ::apache::thrift::protocol::T_STRUCT, 2026);
    xfer += this->wrtcConnectProxyTurnWorker.write(oprot);
    xfer += oprot->writeFieldEnd();
  }

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReportItem &a, ReportItem &b) {
  using ::std::swap;
  swap(a.uri, b.uri);
  swap(a.encryptedItem, b.encryptedItem);
  swap(a.vosdkCounter, b.vosdkCounter);
  swap(a.vosdkSession, b.vosdkSession);
  swap(a.vosdkVocs, b.vosdkVocs);
  swap(a.vosdkVos, b.vosdkVos);
  swap(a.vosdkWebQuit, b.vosdkWebQuit);
  swap(a.wrtcBrowser2Gateway, b.wrtcBrowser2Gateway);
  swap(a.wrtcBrowser2GatewayVideo, b.wrtcBrowser2GatewayVideo);
  swap(a.wrtcBrowser2BrowserAudio, b.wrtcBrowser2BrowserAudio);
  swap(a.wrtcBrowser2BrowserVideo, b.wrtcBrowser2BrowserVideo);
  swap(a.wrtcProfile, b.wrtcProfile);
  swap(a.wrtcPubStream, b.wrtcPubStream);
  swap(a.wrtcUnpubStream, b.wrtcUnpubStream);
  swap(a.wrtcSubStream, b.wrtcSubStream);
  swap(a.wrtcUnsubStream, b.wrtcUnsubStream);
  swap(a.wrtcEventsSequence, b.wrtcEventsSequence);
  swap(a.wrtcReceiverReport, b.wrtcReceiverReport);
  swap(a.wrtcGateway2Browser, b.wrtcGateway2Browser);
  swap(a.wrtcStreamControl, b.wrtcStreamControl);
  swap(a.wrtcConnectProxyTurnWorker, b.wrtcConnectProxyTurnWorker);
  swap(a.__isset, b.__isset);
}

ReportItem::ReportItem(const ReportItem& other180) {
  uri = other180.uri;
  encryptedItem = other180.encryptedItem;
  vosdkCounter = other180.vosdkCounter;
  vosdkSession = other180.vosdkSession;
  vosdkVocs = other180.vosdkVocs;
  vosdkVos = other180.vosdkVos;
  vosdkWebQuit = other180.vosdkWebQuit;
  wrtcBrowser2Gateway = other180.wrtcBrowser2Gateway;
  wrtcBrowser2GatewayVideo = other180.wrtcBrowser2GatewayVideo;
  wrtcBrowser2BrowserAudio = other180.wrtcBrowser2BrowserAudio;
  wrtcBrowser2BrowserVideo = other180.wrtcBrowser2BrowserVideo;
  wrtcProfile = other180.wrtcProfile;
  wrtcPubStream = other180.wrtcPubStream;
  wrtcUnpubStream = other180.wrtcUnpubStream;
  wrtcSubStream = other180.wrtcSubStream;
  wrtcUnsubStream = other180.wrtcUnsubStream;
  wrtcEventsSequence = other180.wrtcEventsSequence;
  wrtcReceiverReport = other180.wrtcReceiverReport;
  wrtcGateway2Browser = other180.wrtcGateway2Browser;
  wrtcStreamControl = other180.wrtcStreamControl;
  wrtcConnectProxyTurnWorker = other180.wrtcConnectProxyTurnWorker;
  __isset = other180.__isset;
}
ReportItem& ReportItem::operator=(const ReportItem& other181) {
  uri = other181.uri;
  encryptedItem = other181.encryptedItem;
  vosdkCounter = other181.vosdkCounter;
  vosdkSession = other181.vosdkSession;
  vosdkVocs = other181.vosdkVocs;
  vosdkVos = other181.vosdkVos;
  vosdkWebQuit = other181.vosdkWebQuit;
  wrtcBrowser2Gateway = other181.wrtcBrowser2Gateway;
  wrtcBrowser2GatewayVideo = other181.wrtcBrowser2GatewayVideo;
  wrtcBrowser2BrowserAudio = other181.wrtcBrowser2BrowserAudio;
  wrtcBrowser2BrowserVideo = other181.wrtcBrowser2BrowserVideo;
  wrtcProfile = other181.wrtcProfile;
  wrtcPubStream = other181.wrtcPubStream;
  wrtcUnpubStream = other181.wrtcUnpubStream;
  wrtcSubStream = other181.wrtcSubStream;
  wrtcUnsubStream = other181.wrtcUnsubStream;
  wrtcEventsSequence = other181.wrtcEventsSequence;
  wrtcReceiverReport = other181.wrtcReceiverReport;
  wrtcGateway2Browser = other181.wrtcGateway2Browser;
  wrtcStreamControl = other181.wrtcStreamControl;
  wrtcConnectProxyTurnWorker = other181.wrtcConnectProxyTurnWorker;
  __isset = other181.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReportItem& obj) {
  using apache::thrift::to_string;
  out << "ReportItem(";
  out << "uri=" << to_string(obj.uri);
  out << ", " << "encryptedItem="; (obj.__isset.encryptedItem ? (out << to_string(obj.encryptedItem)) : (out << "<null>"));
  out << ", " << "vosdkCounter="; (obj.__isset.vosdkCounter ? (out << to_string(obj.vosdkCounter)) : (out << "<null>"));
  out << ", " << "vosdkSession="; (obj.__isset.vosdkSession ? (out << to_string(obj.vosdkSession)) : (out << "<null>"));
  out << ", " << "vosdkVocs="; (obj.__isset.vosdkVocs ? (out << to_string(obj.vosdkVocs)) : (out << "<null>"));
  out << ", " << "vosdkVos="; (obj.__isset.vosdkVos ? (out << to_string(obj.vosdkVos)) : (out << "<null>"));
  out << ", " << "vosdkWebQuit="; (obj.__isset.vosdkWebQuit ? (out << to_string(obj.vosdkWebQuit)) : (out << "<null>"));
  out << ", " << "wrtcBrowser2Gateway="; (obj.__isset.wrtcBrowser2Gateway ? (out << to_string(obj.wrtcBrowser2Gateway)) : (out << "<null>"));
  out << ", " << "wrtcProfile="; (obj.__isset.wrtcProfile ? (out << to_string(obj.wrtcProfile)) : (out << "<null>"));
  out << ", " << "wrtcPubStream="; (obj.__isset.wrtcPubStream ? (out << to_string(obj.wrtcPubStream)) : (out << "<null>"));
  out << ", " << "wrtcUnpubStream="; (obj.__isset.wrtcUnpubStream ? (out << to_string(obj.wrtcUnpubStream)) : (out << "<null>"));
  out << ", " << "wrtcSubStream="; (obj.__isset.wrtcSubStream ? (out << to_string(obj.wrtcSubStream)) : (out << "<null>"));
  out << ", " << "wrtcUnsubStream="; (obj.__isset.wrtcUnsubStream ? (out << to_string(obj.wrtcUnsubStream)) : (out << "<null>"));
  out << ", " << "wrtcEventsSequence="; (obj.__isset.wrtcEventsSequence ? (out << to_string(obj.wrtcEventsSequence)) : (out << "<null>"));
  out << ", " << "wrtcReceiverReport="; (obj.__isset.wrtcReceiverReport ? (out << to_string(obj.wrtcReceiverReport)) : (out << "<null>"));
  out << ", " << "wrtcGateway2Browser="; (obj.__isset.wrtcGateway2Browser ? (out << to_string(obj.wrtcGateway2Browser)) : (out << "<null>"));
  out << ", " << "wrtcStreamControl="; (obj.__isset.wrtcStreamControl ? (out << to_string(obj.wrtcStreamControl)) : (out << "<null>"));
  out << ", " << "wrtcConnectProxyTurnWorker="; (obj.__isset.wrtcConnectProxyTurnWorker ? (out << to_string(obj.wrtcConnectProxyTurnWorker)) : (out << "<null>"));
  out << ")";
  return out;
}


