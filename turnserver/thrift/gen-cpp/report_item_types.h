/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef report_item_TYPES_H
#define report_item_TYPES_H

#include <iosfwd>

#include "../Thrift.h"
#include "../TApplicationException.h"
#include "../protocol/TProtocol.h"
#include "../transport/TTransport.h"

#include "../cxxfunctional.h"




class EncryptedItem;

class VosdkHeader;

class VosdkCounterItem;

class VosdkCounter;

class VosdkSession;

class VosdkVocs;

class VosdkVos;

class WrtcBrowser2Gateway;

class WrtcBrowser2Browser;

class WrtcProfile;

class WrtcPubStream;

class WrtcUnpubStream;

class WrtcSubStream;

class WrtcUnsubStream;

class WrtcEventsSequenceItem;

class WrtcEventsSequence;

class WrtcReceiverReport;

class WrtcGateway2Browser;

class WrtcStreamControl;

class VosdkWebQuit;

class WrtcConnectProxyTurnWorker;


class ReportItem;

typedef struct _EncryptedItem__isset {
  _EncryptedItem__isset() : encType(false), key1(false), key2(false), key3(false), key4(false), payload(false) {}
  bool encType :1;
  bool key1 :1;
  bool key2 :1;
  bool key3 :1;
  bool key4 :1;
  bool payload :1;
} _EncryptedItem__isset;

class EncryptedItem {
 public:

  static const char* ascii_fingerprint; // = "E63460C7200B1019E702905930F39D30";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0x34,0x60,0xC7,0x20,0x0B,0x10,0x19,0xE7,0x02,0x90,0x59,0x30,0xF3,0x9D,0x30};

  EncryptedItem(const EncryptedItem&);
  EncryptedItem& operator=(const EncryptedItem&);
  EncryptedItem() : encType(0), key1(), key2(), key3(), key4(), payload() {
  }

  virtual ~EncryptedItem() throw();
  int32_t encType;
  std::string key1;
  std::string key2;
  std::string key3;
  std::string key4;
  std::string payload;

  _EncryptedItem__isset __isset;

  void __set_encType(const int32_t val);

  void __set_key1(const std::string& val);

  void __set_key2(const std::string& val);

  void __set_key3(const std::string& val);

  void __set_key4(const std::string& val);

  void __set_payload(const std::string& val);

  bool operator == (const EncryptedItem & rhs) const
  {
    if (__isset.encType != rhs.__isset.encType)
      return false;
    else if (__isset.encType && !(encType == rhs.encType))
      return false;
    if (__isset.key1 != rhs.__isset.key1)
      return false;
    else if (__isset.key1 && !(key1 == rhs.key1))
      return false;
    if (__isset.key2 != rhs.__isset.key2)
      return false;
    else if (__isset.key2 && !(key2 == rhs.key2))
      return false;
    if (__isset.key3 != rhs.__isset.key3)
      return false;
    else if (__isset.key3 && !(key3 == rhs.key3))
      return false;
    if (__isset.key4 != rhs.__isset.key4)
      return false;
    else if (__isset.key4 && !(key4 == rhs.key4))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const EncryptedItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EncryptedItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EncryptedItem& obj);
};

void swap(EncryptedItem &a, EncryptedItem &b);

typedef struct _VosdkHeader__isset {
  _VosdkHeader__isset() : sid(false), cname(false), cid(false), lts(false), ip(false), uid(false), success(false), elapse(false), peer(false) {}
  bool sid :1;
  bool cname :1;
  bool cid :1;
  bool lts :1;
  bool ip :1;
  bool uid :1;
  bool success :1;
  bool elapse :1;
  bool peer :1;
} _VosdkHeader__isset;

class VosdkHeader {
 public:

  static const char* ascii_fingerprint; // = "3C6FBB1DBFDAB67A445B617A09875A7F";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x6F,0xBB,0x1D,0xBF,0xDA,0xB6,0x7A,0x44,0x5B,0x61,0x7A,0x09,0x87,0x5A,0x7F};

  VosdkHeader(const VosdkHeader&);
  VosdkHeader& operator=(const VosdkHeader&);
  VosdkHeader() : sid(), cname(), cid(0), lts(0), ip(), uid(0), success(0), elapse(0), peer(0) {
  }

  virtual ~VosdkHeader() throw();
  std::string sid;
  std::string cname;
  int64_t cid;
  int64_t lts;
  std::string ip;
  int64_t uid;
  bool success;
  int64_t elapse;
  int64_t peer;

  _VosdkHeader__isset __isset;

  void __set_sid(const std::string& val);

  void __set_cname(const std::string& val);

  void __set_cid(const int64_t val);

  void __set_lts(const int64_t val);

  void __set_ip(const std::string& val);

  void __set_uid(const int64_t val);

  void __set_success(const bool val);

  void __set_elapse(const int64_t val);

  void __set_peer(const int64_t val);

  bool operator == (const VosdkHeader & rhs) const
  {
    if (__isset.sid != rhs.__isset.sid)
      return false;
    else if (__isset.sid && !(sid == rhs.sid))
      return false;
    if (__isset.cname != rhs.__isset.cname)
      return false;
    else if (__isset.cname && !(cname == rhs.cname))
      return false;
    if (__isset.cid != rhs.__isset.cid)
      return false;
    else if (__isset.cid && !(cid == rhs.cid))
      return false;
    if (__isset.lts != rhs.__isset.lts)
      return false;
    else if (__isset.lts && !(lts == rhs.lts))
      return false;
    if (__isset.ip != rhs.__isset.ip)
      return false;
    else if (__isset.ip && !(ip == rhs.ip))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.success != rhs.__isset.success)
      return false;
    else if (__isset.success && !(success == rhs.success))
      return false;
    if (__isset.elapse != rhs.__isset.elapse)
      return false;
    else if (__isset.elapse && !(elapse == rhs.elapse))
      return false;
    if (__isset.peer != rhs.__isset.peer)
      return false;
    else if (__isset.peer && !(peer == rhs.peer))
      return false;
    return true;
  }
  bool operator != (const VosdkHeader &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkHeader & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkHeader& obj);
};

void swap(VosdkHeader &a, VosdkHeader &b);

typedef struct _VosdkCounterItem__isset {
  _VosdkCounterItem__isset() : name(false), lts(false), value(false), id(false), tagErrorCode(false) {}
  bool name :1;
  bool lts :1;
  bool value :1;
  bool id :1;
  bool tagErrorCode :1;
} _VosdkCounterItem__isset;

class VosdkCounterItem {
 public:

  static const char* ascii_fingerprint; // = "C019BD9C5C74062EF1B7E51D59FB3E2B";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x19,0xBD,0x9C,0x5C,0x74,0x06,0x2E,0xF1,0xB7,0xE5,0x1D,0x59,0xFB,0x3E,0x2B};

  VosdkCounterItem(const VosdkCounterItem&);
  VosdkCounterItem& operator=(const VosdkCounterItem&);
  VosdkCounterItem() : name(), lts(0), value(0), id(0), tagErrorCode(0) {
  }

  virtual ~VosdkCounterItem() throw();
  std::string name;
  int64_t lts;
  int32_t value;
  int32_t id;
  int32_t tagErrorCode;

  _VosdkCounterItem__isset __isset;

  void __set_name(const std::string& val);

  void __set_lts(const int64_t val);

  void __set_value(const int32_t val);

  void __set_id(const int32_t val);

  void __set_tagErrorCode(const int32_t val);

  bool operator == (const VosdkCounterItem & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.lts != rhs.__isset.lts)
      return false;
    else if (__isset.lts && !(lts == rhs.lts))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.tagErrorCode != rhs.__isset.tagErrorCode)
      return false;
    else if (__isset.tagErrorCode && !(tagErrorCode == rhs.tagErrorCode))
      return false;
    return true;
  }
  bool operator != (const VosdkCounterItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkCounterItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkCounterItem& obj);
};

void swap(VosdkCounterItem &a, VosdkCounterItem &b);

typedef struct _VosdkCounter__isset {
  _VosdkCounter__isset() : header(false), items(false) {}
  bool header :1;
  bool items :1;
} _VosdkCounter__isset;

class VosdkCounter {
 public:

  static const char* ascii_fingerprint; // = "E5A7E3E543C757C392DAAD0A8C4AC992";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0xA7,0xE3,0xE5,0x43,0xC7,0x57,0xC3,0x92,0xDA,0xAD,0x0A,0x8C,0x4A,0xC9,0x92};

  VosdkCounter(const VosdkCounter&);
  VosdkCounter& operator=(const VosdkCounter&);
  VosdkCounter() {
  }

  virtual ~VosdkCounter() throw();
  VosdkHeader header;
  std::vector<VosdkCounterItem>  items;

  _VosdkCounter__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_items(const std::vector<VosdkCounterItem> & val);

  bool operator == (const VosdkCounter & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.items != rhs.__isset.items)
      return false;
    else if (__isset.items && !(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const VosdkCounter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkCounter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkCounter& obj);
};

void swap(VosdkCounter &a, VosdkCounter &b);

typedef struct _VosdkSession__isset {
  _VosdkSession__isset() : header(false), vk(false), ver(false), net1(false), net2(false), localIp(false), ssid(false), bssid(false), siglevel(false), rssi(false), os1(false), did(false), pnq(false), lost(false), info(false), lsid(false), channelMode(false), cheVer(false), sdkBuildNumber(false), cheBuildNumber(false), fsid(false), channelProfile(false), netSubType(false), clientType(false), appCategory(false), clientRole(false), installId(false) {}
  bool header :1;
  bool vk :1;
  bool ver :1;
  bool net1 :1;
  bool net2 :1;
  bool localIp :1;
  bool ssid :1;
  bool bssid :1;
  bool siglevel :1;
  bool rssi :1;
  bool os1 :1;
  bool did :1;
  bool pnq :1;
  bool lost :1;
  bool info :1;
  bool lsid :1;
  bool channelMode :1;
  bool cheVer :1;
  bool sdkBuildNumber :1;
  bool cheBuildNumber :1;
  bool fsid :1;
  bool channelProfile :1;
  bool netSubType :1;
  bool clientType :1;
  bool appCategory :1;
  bool clientRole :1;
  bool installId :1;
} _VosdkSession__isset;

class VosdkSession {
 public:

  static const char* ascii_fingerprint; // = "B05B4756B47D15BBF04BD72147F61841";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x5B,0x47,0x56,0xB4,0x7D,0x15,0xBB,0xF0,0x4B,0xD7,0x21,0x47,0xF6,0x18,0x41};

  VosdkSession(const VosdkSession&);
  VosdkSession& operator=(const VosdkSession&);
  VosdkSession() : vk(), ver(), net1(0), net2(0), localIp(), ssid(), bssid(), siglevel(0), rssi(0), os1(0), did(), pnq(0), lost(0), info(), lsid(), channelMode(0), cheVer(), sdkBuildNumber(0), cheBuildNumber(0), fsid(), channelProfile(0), netSubType(0), clientType(0), appCategory(0), clientRole(0), installId() {
  }

  virtual ~VosdkSession() throw();
  VosdkHeader header;
  std::string vk;
  std::string ver;
  int32_t net1;
  int32_t net2;
  std::string localIp;
  std::string ssid;
  std::string bssid;
  int32_t siglevel;
  int32_t rssi;
  int32_t os1;
  std::string did;
  int32_t pnq;
  int32_t lost;
  std::string info;
  std::string lsid;
  int32_t channelMode;
  std::string cheVer;
  int32_t sdkBuildNumber;
  int32_t cheBuildNumber;
  std::string fsid;
  int32_t channelProfile;
  int32_t netSubType;
  int32_t clientType;
  int32_t appCategory;
  int32_t clientRole;
  std::string installId;

  _VosdkSession__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_vk(const std::string& val);

  void __set_ver(const std::string& val);

  void __set_net1(const int32_t val);

  void __set_net2(const int32_t val);

  void __set_localIp(const std::string& val);

  void __set_ssid(const std::string& val);

  void __set_bssid(const std::string& val);

  void __set_siglevel(const int32_t val);

  void __set_rssi(const int32_t val);

  void __set_os1(const int32_t val);

  void __set_did(const std::string& val);

  void __set_pnq(const int32_t val);

  void __set_lost(const int32_t val);

  void __set_info(const std::string& val);

  void __set_lsid(const std::string& val);

  void __set_channelMode(const int32_t val);

  void __set_cheVer(const std::string& val);

  void __set_sdkBuildNumber(const int32_t val);

  void __set_cheBuildNumber(const int32_t val);

  void __set_fsid(const std::string& val);

  void __set_channelProfile(const int32_t val);

  void __set_netSubType(const int32_t val);

  void __set_clientType(const int32_t val);

  void __set_appCategory(const int32_t val);

  void __set_clientRole(const int32_t val);

  void __set_installId(const std::string& val);

  bool operator == (const VosdkSession & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.vk != rhs.__isset.vk)
      return false;
    else if (__isset.vk && !(vk == rhs.vk))
      return false;
    if (__isset.ver != rhs.__isset.ver)
      return false;
    else if (__isset.ver && !(ver == rhs.ver))
      return false;
    if (__isset.net1 != rhs.__isset.net1)
      return false;
    else if (__isset.net1 && !(net1 == rhs.net1))
      return false;
    if (__isset.net2 != rhs.__isset.net2)
      return false;
    else if (__isset.net2 && !(net2 == rhs.net2))
      return false;
    if (__isset.localIp != rhs.__isset.localIp)
      return false;
    else if (__isset.localIp && !(localIp == rhs.localIp))
      return false;
    if (__isset.ssid != rhs.__isset.ssid)
      return false;
    else if (__isset.ssid && !(ssid == rhs.ssid))
      return false;
    if (__isset.bssid != rhs.__isset.bssid)
      return false;
    else if (__isset.bssid && !(bssid == rhs.bssid))
      return false;
    if (__isset.siglevel != rhs.__isset.siglevel)
      return false;
    else if (__isset.siglevel && !(siglevel == rhs.siglevel))
      return false;
    if (__isset.rssi != rhs.__isset.rssi)
      return false;
    else if (__isset.rssi && !(rssi == rhs.rssi))
      return false;
    if (__isset.os1 != rhs.__isset.os1)
      return false;
    else if (__isset.os1 && !(os1 == rhs.os1))
      return false;
    if (__isset.did != rhs.__isset.did)
      return false;
    else if (__isset.did && !(did == rhs.did))
      return false;
    if (__isset.pnq != rhs.__isset.pnq)
      return false;
    else if (__isset.pnq && !(pnq == rhs.pnq))
      return false;
    if (__isset.lost != rhs.__isset.lost)
      return false;
    else if (__isset.lost && !(lost == rhs.lost))
      return false;
    if (__isset.info != rhs.__isset.info)
      return false;
    else if (__isset.info && !(info == rhs.info))
      return false;
    if (__isset.lsid != rhs.__isset.lsid)
      return false;
    else if (__isset.lsid && !(lsid == rhs.lsid))
      return false;
    if (__isset.channelMode != rhs.__isset.channelMode)
      return false;
    else if (__isset.channelMode && !(channelMode == rhs.channelMode))
      return false;
    if (__isset.cheVer != rhs.__isset.cheVer)
      return false;
    else if (__isset.cheVer && !(cheVer == rhs.cheVer))
      return false;
    if (__isset.sdkBuildNumber != rhs.__isset.sdkBuildNumber)
      return false;
    else if (__isset.sdkBuildNumber && !(sdkBuildNumber == rhs.sdkBuildNumber))
      return false;
    if (__isset.cheBuildNumber != rhs.__isset.cheBuildNumber)
      return false;
    else if (__isset.cheBuildNumber && !(cheBuildNumber == rhs.cheBuildNumber))
      return false;
    if (__isset.fsid != rhs.__isset.fsid)
      return false;
    else if (__isset.fsid && !(fsid == rhs.fsid))
      return false;
    if (__isset.channelProfile != rhs.__isset.channelProfile)
      return false;
    else if (__isset.channelProfile && !(channelProfile == rhs.channelProfile))
      return false;
    if (__isset.netSubType != rhs.__isset.netSubType)
      return false;
    else if (__isset.netSubType && !(netSubType == rhs.netSubType))
      return false;
    if (__isset.clientType != rhs.__isset.clientType)
      return false;
    else if (__isset.clientType && !(clientType == rhs.clientType))
      return false;
    if (__isset.appCategory != rhs.__isset.appCategory)
      return false;
    else if (__isset.appCategory && !(appCategory == rhs.appCategory))
      return false;
    if (__isset.clientRole != rhs.__isset.clientRole)
      return false;
    else if (__isset.clientRole && !(clientRole == rhs.clientRole))
      return false;
    if (__isset.installId != rhs.__isset.installId)
      return false;
    else if (__isset.installId && !(installId == rhs.installId))
      return false;
    return true;
  }
  bool operator != (const VosdkSession &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkSession & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkSession& obj);
};

void swap(VosdkSession &a, VosdkSession &b);

typedef struct _VosdkVocs__isset {
  _VosdkVocs__isset() : header(false), ec(false), sc(false), serverIp(false), firstSuccess(false), responseTime(false), serverIpList(false), ssid(false), bssid(false), localWanIp(false), ispName(false), minorIsp(false) {}
  bool header :1;
  bool ec :1;
  bool sc :1;
  bool serverIp :1;
  bool firstSuccess :1;
  bool responseTime :1;
  bool serverIpList :1;
  bool ssid :1;
  bool bssid :1;
  bool localWanIp :1;
  bool ispName :1;
  bool minorIsp :1;
} _VosdkVocs__isset;

class VosdkVocs {
 public:

  static const char* ascii_fingerprint; // = "AB2655934AC948A3AF53F439E3B96741";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x26,0x55,0x93,0x4A,0xC9,0x48,0xA3,0xAF,0x53,0xF4,0x39,0xE3,0xB9,0x67,0x41};

  VosdkVocs(const VosdkVocs&);
  VosdkVocs& operator=(const VosdkVocs&);
  VosdkVocs() : ec(0), sc(0), serverIp(), firstSuccess(0), responseTime(0), ssid(), bssid(), localWanIp(), ispName(), minorIsp(0) {
  }

  virtual ~VosdkVocs() throw();
  VosdkHeader header;
  int32_t ec;
  int32_t sc;
  std::string serverIp;
  bool firstSuccess;
  int32_t responseTime;
  std::vector<std::string>  serverIpList;
  std::string ssid;
  std::string bssid;
  std::string localWanIp;
  std::string ispName;
  bool minorIsp;

  _VosdkVocs__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_ec(const int32_t val);

  void __set_sc(const int32_t val);

  void __set_serverIp(const std::string& val);

  void __set_firstSuccess(const bool val);

  void __set_responseTime(const int32_t val);

  void __set_serverIpList(const std::vector<std::string> & val);

  void __set_ssid(const std::string& val);

  void __set_bssid(const std::string& val);

  void __set_localWanIp(const std::string& val);

  void __set_ispName(const std::string& val);

  void __set_minorIsp(const bool val);

  bool operator == (const VosdkVocs & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.ec != rhs.__isset.ec)
      return false;
    else if (__isset.ec && !(ec == rhs.ec))
      return false;
    if (__isset.sc != rhs.__isset.sc)
      return false;
    else if (__isset.sc && !(sc == rhs.sc))
      return false;
    if (__isset.serverIp != rhs.__isset.serverIp)
      return false;
    else if (__isset.serverIp && !(serverIp == rhs.serverIp))
      return false;
    if (__isset.firstSuccess != rhs.__isset.firstSuccess)
      return false;
    else if (__isset.firstSuccess && !(firstSuccess == rhs.firstSuccess))
      return false;
    if (__isset.responseTime != rhs.__isset.responseTime)
      return false;
    else if (__isset.responseTime && !(responseTime == rhs.responseTime))
      return false;
    if (__isset.serverIpList != rhs.__isset.serverIpList)
      return false;
    else if (__isset.serverIpList && !(serverIpList == rhs.serverIpList))
      return false;
    if (__isset.ssid != rhs.__isset.ssid)
      return false;
    else if (__isset.ssid && !(ssid == rhs.ssid))
      return false;
    if (__isset.bssid != rhs.__isset.bssid)
      return false;
    else if (__isset.bssid && !(bssid == rhs.bssid))
      return false;
    if (__isset.localWanIp != rhs.__isset.localWanIp)
      return false;
    else if (__isset.localWanIp && !(localWanIp == rhs.localWanIp))
      return false;
    if (__isset.ispName != rhs.__isset.ispName)
      return false;
    else if (__isset.ispName && !(ispName == rhs.ispName))
      return false;
    if (__isset.minorIsp != rhs.__isset.minorIsp)
      return false;
    else if (__isset.minorIsp && !(minorIsp == rhs.minorIsp))
      return false;
    return true;
  }
  bool operator != (const VosdkVocs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVocs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVocs& obj);
};

void swap(VosdkVocs &a, VosdkVocs &b);

typedef struct _VosdkVos__isset {
  _VosdkVos__isset() : header(false), ec(false), sc(false), serverIp(false), vosList(false), firstSuccess(false), channelCount(false), responseTime(false) {}
  bool header :1;
  bool ec :1;
  bool sc :1;
  bool serverIp :1;
  bool vosList :1;
  bool firstSuccess :1;
  bool channelCount :1;
  bool responseTime :1;
} _VosdkVos__isset;

class VosdkVos {
 public:

  static const char* ascii_fingerprint; // = "BCFCD223285404DB55A9DABDDE8B9E6E";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0xFC,0xD2,0x23,0x28,0x54,0x04,0xDB,0x55,0xA9,0xDA,0xBD,0xDE,0x8B,0x9E,0x6E};

  VosdkVos(const VosdkVos&);
  VosdkVos& operator=(const VosdkVos&);
  VosdkVos() : ec(0), sc(0), serverIp(), firstSuccess(0), channelCount(0), responseTime(0) {
  }

  virtual ~VosdkVos() throw();
  VosdkHeader header;
  int32_t ec;
  int32_t sc;
  std::string serverIp;
  std::vector<std::string>  vosList;
  bool firstSuccess;
  int32_t channelCount;
  int32_t responseTime;

  _VosdkVos__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_ec(const int32_t val);

  void __set_sc(const int32_t val);

  void __set_serverIp(const std::string& val);

  void __set_vosList(const std::vector<std::string> & val);

  void __set_firstSuccess(const bool val);

  void __set_channelCount(const int32_t val);

  void __set_responseTime(const int32_t val);

  bool operator == (const VosdkVos & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.ec != rhs.__isset.ec)
      return false;
    else if (__isset.ec && !(ec == rhs.ec))
      return false;
    if (__isset.sc != rhs.__isset.sc)
      return false;
    else if (__isset.sc && !(sc == rhs.sc))
      return false;
    if (__isset.serverIp != rhs.__isset.serverIp)
      return false;
    else if (__isset.serverIp && !(serverIp == rhs.serverIp))
      return false;
    if (__isset.vosList != rhs.__isset.vosList)
      return false;
    else if (__isset.vosList && !(vosList == rhs.vosList))
      return false;
    if (__isset.firstSuccess != rhs.__isset.firstSuccess)
      return false;
    else if (__isset.firstSuccess && !(firstSuccess == rhs.firstSuccess))
      return false;
    if (__isset.channelCount != rhs.__isset.channelCount)
      return false;
    else if (__isset.channelCount && !(channelCount == rhs.channelCount))
      return false;
    if (__isset.responseTime != rhs.__isset.responseTime)
      return false;
    else if (__isset.responseTime && !(responseTime == rhs.responseTime))
      return false;
    return true;
  }
  bool operator != (const VosdkVos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVos& obj);
};

void swap(VosdkVos &a, VosdkVos &b);

typedef struct _WrtcBrowser2Gateway__isset {
  _WrtcBrowser2Gateway__isset() : vid(false), cid(false), uid(false), vos_id(false), source_ip(false), source_port(false), dest_ip(false), dest_port(false), delay(false), jitter100(false), jitter95(false), jitter90(false), lost_ratio(false), lost_ratio2(false), lost_ratio3(false), lts(false), sid(false) {}
  bool vid :1;
  bool cid :1;
  bool uid :1;
  bool vos_id :1;
  bool source_ip :1;
  bool source_port :1;
  bool dest_ip :1;
  bool dest_port :1;
  bool delay :1;
  bool jitter100 :1;
  bool jitter95 :1;
  bool jitter90 :1;
  bool lost_ratio :1;
  bool lost_ratio2 :1;
  bool lost_ratio3 :1;
  bool lts :1;
  bool sid :1;
} _WrtcBrowser2Gateway__isset;

class WrtcBrowser2Gateway {
 public:

  static const char* ascii_fingerprint; // = "C6ED383665B5FC8F90BF6952A7D1509E";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0xED,0x38,0x36,0x65,0xB5,0xFC,0x8F,0x90,0xBF,0x69,0x52,0xA7,0xD1,0x50,0x9E};

  WrtcBrowser2Gateway(const WrtcBrowser2Gateway&);
  WrtcBrowser2Gateway& operator=(const WrtcBrowser2Gateway&);
  WrtcBrowser2Gateway() : vid(0), cid(0), uid(0), vos_id(0), source_ip(0), source_port(0), dest_ip(0), dest_port(0), delay(0), jitter100(0), jitter95(0), jitter90(0), lost_ratio(0), lost_ratio2(0), lost_ratio3(0), lts(0), sid() {
  }

  virtual ~WrtcBrowser2Gateway() throw();
  int32_t vid;
  int64_t cid;
  int64_t uid;
  int32_t vos_id;
  int32_t source_ip;
  int16_t source_port;
  int32_t dest_ip;
  int16_t dest_port;
  int16_t delay;
  int16_t jitter100;
  int16_t jitter95;
  int16_t jitter90;
  int16_t lost_ratio;
  int16_t lost_ratio2;
  int16_t lost_ratio3;
  int64_t lts;
  std::string sid;

  _WrtcBrowser2Gateway__isset __isset;

  void __set_vid(const int32_t val);

  void __set_cid(const int64_t val);

  void __set_uid(const int64_t val);

  void __set_vos_id(const int32_t val);

  void __set_source_ip(const int32_t val);

  void __set_source_port(const int16_t val);

  void __set_dest_ip(const int32_t val);

  void __set_dest_port(const int16_t val);

  void __set_delay(const int16_t val);

  void __set_jitter100(const int16_t val);

  void __set_jitter95(const int16_t val);

  void __set_jitter90(const int16_t val);

  void __set_lost_ratio(const int16_t val);

  void __set_lost_ratio2(const int16_t val);

  void __set_lost_ratio3(const int16_t val);

  void __set_lts(const int64_t val);

  void __set_sid(const std::string& val);

  bool operator == (const WrtcBrowser2Gateway & rhs) const
  {
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.cid != rhs.__isset.cid)
      return false;
    else if (__isset.cid && !(cid == rhs.cid))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.vos_id != rhs.__isset.vos_id)
      return false;
    else if (__isset.vos_id && !(vos_id == rhs.vos_id))
      return false;
    if (__isset.source_ip != rhs.__isset.source_ip)
      return false;
    else if (__isset.source_ip && !(source_ip == rhs.source_ip))
      return false;
    if (__isset.source_port != rhs.__isset.source_port)
      return false;
    else if (__isset.source_port && !(source_port == rhs.source_port))
      return false;
    if (__isset.dest_ip != rhs.__isset.dest_ip)
      return false;
    else if (__isset.dest_ip && !(dest_ip == rhs.dest_ip))
      return false;
    if (__isset.dest_port != rhs.__isset.dest_port)
      return false;
    else if (__isset.dest_port && !(dest_port == rhs.dest_port))
      return false;
    if (__isset.delay != rhs.__isset.delay)
      return false;
    else if (__isset.delay && !(delay == rhs.delay))
      return false;
    if (__isset.jitter100 != rhs.__isset.jitter100)
      return false;
    else if (__isset.jitter100 && !(jitter100 == rhs.jitter100))
      return false;
    if (__isset.jitter95 != rhs.__isset.jitter95)
      return false;
    else if (__isset.jitter95 && !(jitter95 == rhs.jitter95))
      return false;
    if (__isset.jitter90 != rhs.__isset.jitter90)
      return false;
    else if (__isset.jitter90 && !(jitter90 == rhs.jitter90))
      return false;
    if (__isset.lost_ratio != rhs.__isset.lost_ratio)
      return false;
    else if (__isset.lost_ratio && !(lost_ratio == rhs.lost_ratio))
      return false;
    if (__isset.lost_ratio2 != rhs.__isset.lost_ratio2)
      return false;
    else if (__isset.lost_ratio2 && !(lost_ratio2 == rhs.lost_ratio2))
      return false;
    if (__isset.lost_ratio3 != rhs.__isset.lost_ratio3)
      return false;
    else if (__isset.lost_ratio3 && !(lost_ratio3 == rhs.lost_ratio3))
      return false;
    if (__isset.lts != rhs.__isset.lts)
      return false;
    else if (__isset.lts && !(lts == rhs.lts))
      return false;
    if (__isset.sid != rhs.__isset.sid)
      return false;
    else if (__isset.sid && !(sid == rhs.sid))
      return false;
    return true;
  }
  bool operator != (const WrtcBrowser2Gateway &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcBrowser2Gateway & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcBrowser2Gateway& obj);
};

void swap(WrtcBrowser2Gateway &a, WrtcBrowser2Gateway &b);

typedef struct _WrtcBrowser2Browser__isset {
  _WrtcBrowser2Browser__isset() : vid(false), cid(false), uid(false), vos_id(false), source_ip(false), source_port(false), dest_ip(false), dest_port(false), delay(false), jitter100(false), jitter95(false), jitter90(false), lost_ratio(false), lost_ratio2(false), lost_ratio3(false), lts(false), sid(false), peer_uid(false) {}
  bool vid :1;
  bool cid :1;
  bool uid :1;
  bool vos_id :1;
  bool source_ip :1;
  bool source_port :1;
  bool dest_ip :1;
  bool dest_port :1;
  bool delay :1;
  bool jitter100 :1;
  bool jitter95 :1;
  bool jitter90 :1;
  bool lost_ratio :1;
  bool lost_ratio2 :1;
  bool lost_ratio3 :1;
  bool lts :1;
  bool sid :1;
  bool peer_uid :1;
} _WrtcBrowser2Browser__isset;

class WrtcBrowser2Browser {
 public:

  static const char* ascii_fingerprint; // = "C6ED383665B5FC8F90BF6952A7D1509E";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0xED,0x38,0x36,0x65,0xB5,0xFC,0x8F,0x90,0xBF,0x69,0x52,0xA7,0xD1,0x50,0x9E};

  WrtcBrowser2Browser(const WrtcBrowser2Browser&);
  WrtcBrowser2Browser& operator=(const WrtcBrowser2Browser&);
  WrtcBrowser2Browser() : vid(0), cid(0), uid(0), vos_id(0), source_ip(0), source_port(0), dest_ip(0), dest_port(0), delay(0), jitter100(0), jitter95(0), jitter90(0), lost_ratio(0), lost_ratio2(0), lost_ratio3(0), lts(0), sid(), peer_uid(0) {
  }

  virtual ~WrtcBrowser2Browser() throw();
  int32_t vid;
  int64_t cid;
  int64_t uid;
  int32_t vos_id;
  int32_t source_ip;
  int16_t source_port;
  int32_t dest_ip;
  int16_t dest_port;
  int16_t delay;
  int16_t jitter100;
  int16_t jitter95;
  int16_t jitter90;
  int16_t lost_ratio;
  int16_t lost_ratio2;
  int16_t lost_ratio3;
  int64_t lts;
  std::string sid;
  int32_t peer_uid;

  _WrtcBrowser2Browser__isset __isset;

  void __set_vid(const int32_t val);

  void __set_cid(const int64_t val);

  void __set_uid(const int64_t val);

  void __set_vos_id(const int32_t val);

  void __set_source_ip(const int32_t val);

  void __set_source_port(const int16_t val);

  void __set_dest_ip(const int32_t val);

  void __set_dest_port(const int16_t val);

  void __set_delay(const int16_t val);

  void __set_jitter100(const int16_t val);

  void __set_jitter95(const int16_t val);

  void __set_jitter90(const int16_t val);

  void __set_lost_ratio(const int16_t val);

  void __set_lost_ratio2(const int16_t val);

  void __set_lost_ratio3(const int16_t val);

  void __set_lts(const int64_t val);

  void __set_sid(const std::string& val);

  void __set_peer_uid(const int32_t val);

  bool operator == (const WrtcBrowser2Browser & rhs) const
  {
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.cid != rhs.__isset.cid)
      return false;
    else if (__isset.cid && !(cid == rhs.cid))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.vos_id != rhs.__isset.vos_id)
      return false;
    else if (__isset.vos_id && !(vos_id == rhs.vos_id))
      return false;
    if (__isset.source_ip != rhs.__isset.source_ip)
      return false;
    else if (__isset.source_ip && !(source_ip == rhs.source_ip))
      return false;
    if (__isset.source_port != rhs.__isset.source_port)
      return false;
    else if (__isset.source_port && !(source_port == rhs.source_port))
      return false;
    if (__isset.dest_ip != rhs.__isset.dest_ip)
      return false;
    else if (__isset.dest_ip && !(dest_ip == rhs.dest_ip))
      return false;
    if (__isset.dest_port != rhs.__isset.dest_port)
      return false;
    else if (__isset.dest_port && !(dest_port == rhs.dest_port))
      return false;
    if (__isset.delay != rhs.__isset.delay)
      return false;
    else if (__isset.delay && !(delay == rhs.delay))
      return false;
    if (__isset.jitter100 != rhs.__isset.jitter100)
      return false;
    else if (__isset.jitter100 && !(jitter100 == rhs.jitter100))
      return false;
    if (__isset.jitter95 != rhs.__isset.jitter95)
      return false;
    else if (__isset.jitter95 && !(jitter95 == rhs.jitter95))
      return false;
    if (__isset.jitter90 != rhs.__isset.jitter90)
      return false;
    else if (__isset.jitter90 && !(jitter90 == rhs.jitter90))
      return false;
    if (__isset.lost_ratio != rhs.__isset.lost_ratio)
      return false;
    else if (__isset.lost_ratio && !(lost_ratio == rhs.lost_ratio))
      return false;
    if (__isset.lost_ratio2 != rhs.__isset.lost_ratio2)
      return false;
    else if (__isset.lost_ratio2 && !(lost_ratio2 == rhs.lost_ratio2))
      return false;
    if (__isset.lost_ratio3 != rhs.__isset.lost_ratio3)
      return false;
    else if (__isset.lost_ratio3 && !(lost_ratio3 == rhs.lost_ratio3))
      return false;
    if (__isset.lts != rhs.__isset.lts)
      return false;
    else if (__isset.lts && !(lts == rhs.lts))
      return false;
    if (__isset.sid != rhs.__isset.sid)
      return false;
    if (__isset.peer_uid != rhs.__isset.peer_uid)
      return false;
    else if (__isset.sid && !(sid == rhs.sid))
      return false;
    else if (__isset.peer_uid && !(peer_uid == rhs.peer_uid))
      return false;
    return true;
  }
  bool operator != (const WrtcBrowser2Browser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcBrowser2Browser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcBrowser2Browser& obj);
};

void swap(WrtcBrowser2Browser &a, WrtcBrowser2Browser &b);

typedef struct _WrtcProfile__isset {
  _WrtcProfile__isset() : header(false), framerate(false), bitrate(false), width(false), height(false) {}
  bool header :1;
  bool framerate :1;
  bool bitrate :1;
  bool width :1;
  bool height :1;
} _WrtcProfile__isset;

class WrtcProfile {
 public:

  static const char* ascii_fingerprint; // = "18DF9D190D8E9E00A48E0285B6130426";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0xDF,0x9D,0x19,0x0D,0x8E,0x9E,0x00,0xA4,0x8E,0x02,0x85,0xB6,0x13,0x04,0x26};

  WrtcProfile(const WrtcProfile&);
  WrtcProfile& operator=(const WrtcProfile&);
  WrtcProfile() : framerate(0), bitrate(0), width(0), height(0) {
  }

  virtual ~WrtcProfile() throw();
  VosdkHeader header;
  int16_t framerate;
  int32_t bitrate;
  int32_t width;
  int32_t height;

  _WrtcProfile__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_framerate(const int16_t val);

  void __set_bitrate(const int32_t val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const WrtcProfile & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.framerate != rhs.__isset.framerate)
      return false;
    else if (__isset.framerate && !(framerate == rhs.framerate))
      return false;
    if (__isset.bitrate != rhs.__isset.bitrate)
      return false;
    else if (__isset.bitrate && !(bitrate == rhs.bitrate))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const WrtcProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcProfile& obj);
};

void swap(WrtcProfile &a, WrtcProfile &b);

typedef struct _WrtcPubStream__isset {
  _WrtcPubStream__isset() : header(false), audio(false), video(false) {}
  bool header :1;
  bool audio :1;
  bool video :1;
} _WrtcPubStream__isset;

class WrtcPubStream {
 public:

  static const char* ascii_fingerprint; // = "D9ACD16268569EC75DBC65313B619291";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xAC,0xD1,0x62,0x68,0x56,0x9E,0xC7,0x5D,0xBC,0x65,0x31,0x3B,0x61,0x92,0x91};

  WrtcPubStream(const WrtcPubStream&);
  WrtcPubStream& operator=(const WrtcPubStream&);
  WrtcPubStream() : audio(0), video(0) {
  }

  virtual ~WrtcPubStream() throw();
  VosdkHeader header;
  bool audio;
  bool video;

  _WrtcPubStream__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_audio(const bool val);

  void __set_video(const bool val);

  bool operator == (const WrtcPubStream & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.audio != rhs.__isset.audio)
      return false;
    else if (__isset.audio && !(audio == rhs.audio))
      return false;
    if (__isset.video != rhs.__isset.video)
      return false;
    else if (__isset.video && !(video == rhs.video))
      return false;
    return true;
  }
  bool operator != (const WrtcPubStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcPubStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcPubStream& obj);
};

void swap(WrtcPubStream &a, WrtcPubStream &b);

typedef struct _WrtcUnpubStream__isset {
  _WrtcUnpubStream__isset() : header(false) {}
  bool header :1;
} _WrtcUnpubStream__isset;

class WrtcUnpubStream {
 public:

  static const char* ascii_fingerprint; // = "C3D41A67DB60E8E4C8D244D93F311688";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

  WrtcUnpubStream(const WrtcUnpubStream&);
  WrtcUnpubStream& operator=(const WrtcUnpubStream&);
  WrtcUnpubStream() {
  }

  virtual ~WrtcUnpubStream() throw();
  VosdkHeader header;

  _WrtcUnpubStream__isset __isset;

  void __set_header(const VosdkHeader& val);

  bool operator == (const WrtcUnpubStream & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const WrtcUnpubStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcUnpubStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcUnpubStream& obj);
};

void swap(WrtcUnpubStream &a, WrtcUnpubStream &b);

typedef struct _WrtcSubStream__isset {
  _WrtcSubStream__isset() : header(false), peerUid(false) {}
  bool header :1;
  bool peerUid :1;
} _WrtcSubStream__isset;

class WrtcSubStream {
 public:

  static const char* ascii_fingerprint; // = "1DDE93193DBC99C1A6290B4A983847BB";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0xDE,0x93,0x19,0x3D,0xBC,0x99,0xC1,0xA6,0x29,0x0B,0x4A,0x98,0x38,0x47,0xBB};

  WrtcSubStream(const WrtcSubStream&);
  WrtcSubStream& operator=(const WrtcSubStream&);
  WrtcSubStream() : peerUid(0) {
  }

  virtual ~WrtcSubStream() throw();
  VosdkHeader header;
  int64_t peerUid;

  _WrtcSubStream__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  bool operator == (const WrtcSubStream & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    return true;
  }
  bool operator != (const WrtcSubStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcSubStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcSubStream& obj);
};

void swap(WrtcSubStream &a, WrtcSubStream &b);

typedef struct _WrtcUnsubStream__isset {
  _WrtcUnsubStream__isset() : header(false), peerUid(false) {}
  bool header :1;
  bool peerUid :1;
} _WrtcUnsubStream__isset;

class WrtcUnsubStream {
 public:

  static const char* ascii_fingerprint; // = "1DDE93193DBC99C1A6290B4A983847BB";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0xDE,0x93,0x19,0x3D,0xBC,0x99,0xC1,0xA6,0x29,0x0B,0x4A,0x98,0x38,0x47,0xBB};

  WrtcUnsubStream(const WrtcUnsubStream&);
  WrtcUnsubStream& operator=(const WrtcUnsubStream&);
  WrtcUnsubStream() : peerUid(0) {
  }

  virtual ~WrtcUnsubStream() throw();
  VosdkHeader header;
  int64_t peerUid;

  _WrtcUnsubStream__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  bool operator == (const WrtcUnsubStream & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    return true;
  }
  bool operator != (const WrtcUnsubStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcUnsubStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcUnsubStream& obj);
};

void swap(WrtcUnsubStream &a, WrtcUnsubStream &b);

typedef struct _WrtcEventsSequenceItem__isset {
  _WrtcEventsSequenceItem__isset() : lts(false), elps(false), ec(false), addl_s1(false), addl_s2(false), addl_i1(false), addl_i2(false), addl_i3(false), addl_i4(false) {}
  bool lts :1;
  bool elps :1;
  bool ec :1;
  bool addl_s1 :1;
  bool addl_s2 :1;
  bool addl_i1 :1;
  bool addl_i2 :1;
  bool addl_i3 :1;
  bool addl_i4 :1;
} _WrtcEventsSequenceItem__isset;

class WrtcEventsSequenceItem {
 public:

  static const char* ascii_fingerprint; // = "0D0E9FB86B5B0C9C91E984F196721B3F";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0x0E,0x9F,0xB8,0x6B,0x5B,0x0C,0x9C,0x91,0xE9,0x84,0xF1,0x96,0x72,0x1B,0x3F};

  WrtcEventsSequenceItem(const WrtcEventsSequenceItem&);
  WrtcEventsSequenceItem& operator=(const WrtcEventsSequenceItem&);
  WrtcEventsSequenceItem() : n(), succ(0), lts(0), elps(0), ec(), addl_s1(), addl_s2(), addl_i1(0), addl_i2(0), addl_i3(0), addl_i4(0) {
  }

  virtual ~WrtcEventsSequenceItem() throw();
  std::string n;
  bool succ;
  int64_t lts;
  int32_t elps;
  std::string ec;
  std::string addl_s1;
  std::string addl_s2;
  int64_t addl_i1;
  int64_t addl_i2;
  int32_t addl_i3;
  int32_t addl_i4;

  _WrtcEventsSequenceItem__isset __isset;

  void __set_n(const std::string& val);

  void __set_succ(const bool val);

  void __set_lts(const int64_t val);

  void __set_elps(const int32_t val);

  void __set_ec(const std::string& val);

  void __set_addl_s1(const std::string& val);

  void __set_addl_s2(const std::string& val);

  void __set_addl_i1(const int64_t val);

  void __set_addl_i2(const int64_t val);

  void __set_addl_i3(const int32_t val);

  void __set_addl_i4(const int32_t val);

  bool operator == (const WrtcEventsSequenceItem & rhs) const
  {
    if (!(n == rhs.n))
      return false;
    if (!(succ == rhs.succ))
      return false;
    if (__isset.lts != rhs.__isset.lts)
      return false;
    else if (__isset.lts && !(lts == rhs.lts))
      return false;
    if (__isset.elps != rhs.__isset.elps)
      return false;
    else if (__isset.elps && !(elps == rhs.elps))
      return false;
    if (__isset.ec != rhs.__isset.ec)
      return false;
    else if (__isset.ec && !(ec == rhs.ec))
      return false;
    if (__isset.addl_s1 != rhs.__isset.addl_s1)
      return false;
    else if (__isset.addl_s1 && !(addl_s1 == rhs.addl_s1))
      return false;
    if (__isset.addl_s2 != rhs.__isset.addl_s2)
      return false;
    else if (__isset.addl_s2 && !(addl_s2 == rhs.addl_s2))
      return false;
    if (__isset.addl_i1 != rhs.__isset.addl_i1)
      return false;
    else if (__isset.addl_i1 && !(addl_i1 == rhs.addl_i1))
      return false;
    if (__isset.addl_i2 != rhs.__isset.addl_i2)
      return false;
    else if (__isset.addl_i2 && !(addl_i2 == rhs.addl_i2))
      return false;
    if (__isset.addl_i3 != rhs.__isset.addl_i3)
      return false;
    else if (__isset.addl_i3 && !(addl_i3 == rhs.addl_i3))
      return false;
    if (__isset.addl_i4 != rhs.__isset.addl_i4)
      return false;
    else if (__isset.addl_i4 && !(addl_i4 == rhs.addl_i4))
      return false;
    return true;
  }
  bool operator != (const WrtcEventsSequenceItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcEventsSequenceItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcEventsSequenceItem& obj);
};

void swap(WrtcEventsSequenceItem &a, WrtcEventsSequenceItem &b);

typedef struct _WrtcEventsSequence__isset {
  _WrtcEventsSequence__isset() : lts(false), elps(false), appid(false), ver(false), brwsr(false), prev_e(false) {}
  bool lts :1;
  bool elps :1;
  bool appid :1;
  bool ver :1;
  bool brwsr :1;
  bool prev_e :1;
} _WrtcEventsSequence__isset;

class WrtcEventsSequence {
 public:

  static const char* ascii_fingerprint; // = "C294A17FD1B35AEF35BFC13F92D33E61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x94,0xA1,0x7F,0xD1,0xB3,0x5A,0xEF,0x35,0xBF,0xC1,0x3F,0x92,0xD3,0x3E,0x61};

  WrtcEventsSequence(const WrtcEventsSequence&);
  WrtcEventsSequence& operator=(const WrtcEventsSequence&);
  WrtcEventsSequence() : succ(0), lts(0), elps(0), appid(), ver(), brwsr() {
  }

  virtual ~WrtcEventsSequence() throw();
  bool succ;
  int64_t lts;
  int32_t elps;
  std::vector<WrtcEventsSequenceItem>  events;
  std::string appid;
  std::string ver;
  std::string brwsr;
  WrtcEventsSequenceItem prev_e;

  _WrtcEventsSequence__isset __isset;

  void __set_succ(const bool val);

  void __set_lts(const int64_t val);

  void __set_elps(const int32_t val);

  void __set_events(const std::vector<WrtcEventsSequenceItem> & val);

  void __set_appid(const std::string& val);

  void __set_ver(const std::string& val);

  void __set_brwsr(const std::string& val);

  void __set_prev_e(const WrtcEventsSequenceItem& val);

  bool operator == (const WrtcEventsSequence & rhs) const
  {
    if (!(succ == rhs.succ))
      return false;
    if (__isset.lts != rhs.__isset.lts)
      return false;
    else if (__isset.lts && !(lts == rhs.lts))
      return false;
    if (__isset.elps != rhs.__isset.elps)
      return false;
    else if (__isset.elps && !(elps == rhs.elps))
      return false;
    if (!(events == rhs.events))
      return false;
    if (__isset.appid != rhs.__isset.appid)
      return false;
    else if (__isset.appid && !(appid == rhs.appid))
      return false;
    if (__isset.ver != rhs.__isset.ver)
      return false;
    else if (__isset.ver && !(ver == rhs.ver))
      return false;
    if (__isset.brwsr != rhs.__isset.brwsr)
      return false;
    else if (__isset.brwsr && !(brwsr == rhs.brwsr))
      return false;
    if (__isset.prev_e != rhs.__isset.prev_e)
      return false;
    else if (__isset.prev_e && !(prev_e == rhs.prev_e))
      return false;
    return true;
  }
  bool operator != (const WrtcEventsSequence &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcEventsSequence & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcEventsSequence& obj);
};

void swap(WrtcEventsSequence &a, WrtcEventsSequence &b);

typedef struct _WrtcReceiverReport__isset {
  _WrtcReceiverReport__isset() : header(false), sourceSsrc(false), fractionLost(false), cumulativeLost(false), highestSeqNumber(false), jitter(false), lsr(false), dlsr(false), vid(false) {}
  bool header :1;
  bool sourceSsrc :1;
  bool fractionLost :1;
  bool cumulativeLost :1;
  bool highestSeqNumber :1;
  bool jitter :1;
  bool lsr :1;
  bool dlsr :1;
  bool vid :1;
} _WrtcReceiverReport__isset;

class WrtcReceiverReport {
 public:

  static const char* ascii_fingerprint; // = "1EAAE573E18033C1DE5B85F0FD26C77A";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0xAA,0xE5,0x73,0xE1,0x80,0x33,0xC1,0xDE,0x5B,0x85,0xF0,0xFD,0x26,0xC7,0x7A};

  WrtcReceiverReport(const WrtcReceiverReport&);
  WrtcReceiverReport& operator=(const WrtcReceiverReport&);
  WrtcReceiverReport() : sourceSsrc(0), fractionLost(0), cumulativeLost(0), highestSeqNumber(0), jitter(0), lsr(0), dlsr(0), vid(0) {
  }

  virtual ~WrtcReceiverReport() throw();
  VosdkHeader header;
  int64_t sourceSsrc;
  int64_t fractionLost;
  int64_t cumulativeLost;
  int64_t highestSeqNumber;
  int64_t jitter;
  int64_t lsr;
  int64_t dlsr;
  int64_t vid;

  _WrtcReceiverReport__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_sourceSsrc(const int64_t val);

  void __set_fractionLost(const int64_t val);

  void __set_cumulativeLost(const int64_t val);

  void __set_highestSeqNumber(const int64_t val);

  void __set_jitter(const int64_t val);

  void __set_lsr(const int64_t val);

  void __set_dlsr(const int64_t val);

  void __set_vid(const int64_t val);

  bool operator == (const WrtcReceiverReport & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.sourceSsrc != rhs.__isset.sourceSsrc)
      return false;
    else if (__isset.sourceSsrc && !(sourceSsrc == rhs.sourceSsrc))
      return false;
    if (__isset.fractionLost != rhs.__isset.fractionLost)
      return false;
    else if (__isset.fractionLost && !(fractionLost == rhs.fractionLost))
      return false;
    if (__isset.cumulativeLost != rhs.__isset.cumulativeLost)
      return false;
    else if (__isset.cumulativeLost && !(cumulativeLost == rhs.cumulativeLost))
      return false;
    if (__isset.highestSeqNumber != rhs.__isset.highestSeqNumber)
      return false;
    else if (__isset.highestSeqNumber && !(highestSeqNumber == rhs.highestSeqNumber))
      return false;
    if (__isset.jitter != rhs.__isset.jitter)
      return false;
    else if (__isset.jitter && !(jitter == rhs.jitter))
      return false;
    if (__isset.lsr != rhs.__isset.lsr)
      return false;
    else if (__isset.lsr && !(lsr == rhs.lsr))
      return false;
    if (__isset.dlsr != rhs.__isset.dlsr)
      return false;
    else if (__isset.dlsr && !(dlsr == rhs.dlsr))
      return false;
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    return true;
  }
  bool operator != (const WrtcReceiverReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcReceiverReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcReceiverReport& obj);
};

void swap(WrtcReceiverReport &a, WrtcReceiverReport &b);

typedef struct _WrtcGateway2Browser__isset {
  _WrtcGateway2Browser__isset() : sid(false), vid(false), cid(false), uid(false), spkUid(false), delay(false), jitter(false), lost(false) {}
  bool sid :1;
  bool vid :1;
  bool cid :1;
  bool uid :1;
  bool spkUid :1;
  bool delay :1;
  bool jitter :1;
  bool lost :1;
} _WrtcGateway2Browser__isset;

class WrtcGateway2Browser {
 public:

  static const char* ascii_fingerprint; // = "5845D7A2C26F69481939787D26D75AB0";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x45,0xD7,0xA2,0xC2,0x6F,0x69,0x48,0x19,0x39,0x78,0x7D,0x26,0xD7,0x5A,0xB0};

  WrtcGateway2Browser(const WrtcGateway2Browser&);
  WrtcGateway2Browser& operator=(const WrtcGateway2Browser&);
  WrtcGateway2Browser() : sid(), vid(0), cid(0), uid(0), spkUid(0), delay(0), jitter(0), lost(0) {
  }

  virtual ~WrtcGateway2Browser() throw();
  std::string sid;
  int32_t vid;
  int64_t cid;
  int64_t uid;
  int64_t spkUid;
  int16_t delay;
  int16_t jitter;
  int16_t lost;

  _WrtcGateway2Browser__isset __isset;

  void __set_sid(const std::string& val);

  void __set_vid(const int32_t val);

  void __set_cid(const int64_t val);

  void __set_uid(const int64_t val);

  void __set_spkUid(const int64_t val);

  void __set_delay(const int16_t val);

  void __set_jitter(const int16_t val);

  void __set_lost(const int16_t val);

  bool operator == (const WrtcGateway2Browser & rhs) const
  {
    if (__isset.sid != rhs.__isset.sid)
      return false;
    else if (__isset.sid && !(sid == rhs.sid))
      return false;
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.cid != rhs.__isset.cid)
      return false;
    else if (__isset.cid && !(cid == rhs.cid))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.spkUid != rhs.__isset.spkUid)
      return false;
    else if (__isset.spkUid && !(spkUid == rhs.spkUid))
      return false;
    if (__isset.delay != rhs.__isset.delay)
      return false;
    else if (__isset.delay && !(delay == rhs.delay))
      return false;
    if (__isset.jitter != rhs.__isset.jitter)
      return false;
    else if (__isset.jitter && !(jitter == rhs.jitter))
      return false;
    if (__isset.lost != rhs.__isset.lost)
      return false;
    else if (__isset.lost && !(lost == rhs.lost))
      return false;
    return true;
  }
  bool operator != (const WrtcGateway2Browser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcGateway2Browser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcGateway2Browser& obj);
};

void swap(WrtcGateway2Browser &a, WrtcGateway2Browser &b);

typedef struct _WrtcStreamControl__isset {
  _WrtcStreamControl__isset() : header(false), operation(false), streamUid(false) {}
  bool header :1;
  bool operation :1;
  bool streamUid :1;
} _WrtcStreamControl__isset;

class WrtcStreamControl {
 public:

  static const char* ascii_fingerprint; // = "FD3B6AFBADCA9A950CCC783D00D1379A";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x3B,0x6A,0xFB,0xAD,0xCA,0x9A,0x95,0x0C,0xCC,0x78,0x3D,0x00,0xD1,0x37,0x9A};

  WrtcStreamControl(const WrtcStreamControl&);
  WrtcStreamControl& operator=(const WrtcStreamControl&);
  WrtcStreamControl() : operation(), streamUid(0) {
  }

  virtual ~WrtcStreamControl() throw();
  VosdkHeader header;
  std::string operation;
  int64_t streamUid;

  _WrtcStreamControl__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_operation(const std::string& val);

  void __set_streamUid(const int64_t val);

  bool operator == (const WrtcStreamControl & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.operation != rhs.__isset.operation)
      return false;
    else if (__isset.operation && !(operation == rhs.operation))
      return false;
    if (__isset.streamUid != rhs.__isset.streamUid)
      return false;
    else if (__isset.streamUid && !(streamUid == rhs.streamUid))
      return false;
    return true;
  }
  bool operator != (const WrtcStreamControl &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcStreamControl & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcStreamControl& obj);
};

void swap(WrtcStreamControl &a, WrtcStreamControl &b);

typedef struct _VosdkWebQuit__isset {
  _VosdkWebQuit__isset() : header(false), ec(false) {}
  bool header :1;
  bool ec :1;
} _VosdkWebQuit__isset;

class VosdkWebQuit {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkWebQuit(const VosdkWebQuit&);
  VosdkWebQuit& operator=(const VosdkWebQuit&);
  VosdkWebQuit() : ec(0) {
  }

  virtual ~VosdkWebQuit() throw();
  VosdkHeader header;
  int32_t ec;

  _VosdkWebQuit__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_ec(const int32_t val);

  bool operator == (const VosdkWebQuit & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.ec != rhs.__isset.ec)
      return false;
    else if (__isset.ec && !(ec == rhs.ec))
      return false;
    return true;
  }
  bool operator != (const VosdkWebQuit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkWebQuit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkWebQuit& obj);
};

void swap(VosdkWebQuit &a, VosdkWebQuit &b);

typedef struct _WrtcConnectProxyTurnWorker__isset {
  _WrtcConnectProxyTurnWorker__isset() : header(false), clientAddr(false), userCount(false), ingress(false), egress(false), extend(false) {}
  bool header :1;
  bool clientAddr :1;
  bool userCount :1;
  bool ingress :1;
  bool egress :1;
  bool extend :1;
} _WrtcConnectProxyTurnWorker__isset;

class WrtcConnectProxyTurnWorker {
 public:

  static const char* ascii_fingerprint; // = "FD3B6AFBADCA9A950CCC783D00D1379A";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x3B,0x6A,0xFB,0xAD,0xCA,0x9A,0x95,0x0C,0xCC,0x78,0x3D,0x00,0xD1,0x37,0x9A};

  WrtcConnectProxyTurnWorker(const WrtcConnectProxyTurnWorker&);
  WrtcConnectProxyTurnWorker& operator=(const WrtcConnectProxyTurnWorker&);
  WrtcConnectProxyTurnWorker() : clientAddr(), userCount(0), ingress(0), egress(0), extend() {
  }

  virtual ~WrtcConnectProxyTurnWorker() throw();
  VosdkHeader header;
  std::string clientAddr;
  int64_t userCount;
  int64_t ingress;
  int64_t egress;
  std::string extend;

  _WrtcConnectProxyTurnWorker__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_clientAddr(const std::string& val);

  void __set_userCount(const int64_t val);

  void __set_ingress(const int64_t val);

  void __set_egress(const int64_t val);

  void __set_extend(const std::string& val);

  bool operator == (const WrtcConnectProxyTurnWorker & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.clientAddr != rhs.__isset.clientAddr)
      return false;
    else if (__isset.clientAddr && !(clientAddr == rhs.clientAddr))
      return false;
    if (__isset.userCount != rhs.__isset.userCount)
      return false;
    else if (__isset.userCount && !(userCount == rhs.userCount))
      return false;
    if (__isset.ingress != rhs.__isset.ingress)
      return false;
    else if (__isset.ingress && !(ingress == rhs.ingress))
      return false;
    if (__isset.egress != rhs.__isset.egress)
      return false;
    else if (__isset.egress && !(egress == rhs.egress))
      return false;
    if (__isset.extend != rhs.__isset.extend)
      return false;
    else if (__isset.extend && !(extend == rhs.extend))
      return false;    
    return true;
  }
  bool operator != (const WrtcConnectProxyTurnWorker &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcConnectProxyTurnWorker & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcConnectProxyTurnWorker& obj);
};

void swap(WrtcConnectProxyTurnWorker &a, WrtcConnectProxyTurnWorker &b);

typedef struct _ReportItem__isset {
  _ReportItem__isset() : uri(false), encryptedItem(false), vosdkCounter(false), vosdkSession(false), vosdkVocs(false), vosdkVos(false), vosdkWebQuit(false), wrtcBrowser2Gateway(false), wrtcBrowser2GatewayVideo(false), wrtcBrowser2BrowserAudio(false), wrtcBrowser2BrowserVideo(false), wrtcProfile(false), wrtcPubStream(false), wrtcUnpubStream(false), wrtcSubStream(false), wrtcUnsubStream(false), wrtcEventsSequence(false), wrtcReceiverReport(false), wrtcGateway2Browser(false), wrtcStreamControl(false), wrtcConnectProxyTurnWorker(false) {}
  bool uri :1;
  bool encryptedItem :1;
  bool vosdkCounter :1;
  bool vosdkSession :1;
  bool vosdkVocs :1;
  bool vosdkVos :1;
  bool vosdkWebQuit :1;
  bool wrtcBrowser2Gateway :1;
  bool wrtcBrowser2GatewayVideo :1;
  bool wrtcBrowser2BrowserAudio :1;
  bool wrtcBrowser2BrowserVideo :1;
  bool wrtcProfile :1;
  bool wrtcPubStream :1;
  bool wrtcUnpubStream :1;
  bool wrtcSubStream :1;
  bool wrtcUnsubStream :1;
  bool wrtcEventsSequence :1;
  bool wrtcReceiverReport :1;
  bool wrtcGateway2Browser :1;
  bool wrtcStreamControl :1;
  bool wrtcSession :1;
  bool wrtcJoinChooseServer :1;
  bool wrtcJoinGateway :1;
  bool wrtcSubscribe :1;
  bool wrtcPublish :1;
  bool wrtcFirstFrame :1;
  bool wrtcStreamSwitch :1;
  bool wrtcConnectProxyTurnWorker :1;
} _ReportItem__isset;

class ReportItem {
 public:

  static const char* ascii_fingerprint; // = "5E764322CB88C7EA1E151C741866208E";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0x76,0x43,0x22,0xCB,0x88,0xC7,0xEA,0x1E,0x15,0x1C,0x74,0x18,0x66,0x20,0x8E};

  ReportItem(const ReportItem&);
  ReportItem& operator=(const ReportItem&);
  ReportItem() : uri(0) {
  }

  virtual ~ReportItem() throw();
  int32_t uri;
  EncryptedItem encryptedItem;
  VosdkCounter vosdkCounter;
  VosdkSession vosdkSession;
  VosdkVocs vosdkVocs;
  VosdkVos vosdkVos;
  VosdkWebQuit vosdkWebQuit;
  WrtcBrowser2Gateway wrtcBrowser2Gateway;
  WrtcBrowser2Gateway wrtcBrowser2GatewayVideo;
  WrtcBrowser2Browser wrtcBrowser2BrowserAudio;
  WrtcBrowser2Browser wrtcBrowser2BrowserVideo;
  WrtcProfile wrtcProfile;
  WrtcPubStream wrtcPubStream;
  WrtcUnpubStream wrtcUnpubStream;
  WrtcSubStream wrtcSubStream;
  WrtcUnsubStream wrtcUnsubStream;
  WrtcEventsSequence wrtcEventsSequence;
  WrtcReceiverReport wrtcReceiverReport;
  WrtcGateway2Browser wrtcGateway2Browser;
  WrtcStreamControl wrtcStreamControl;
  WrtcConnectProxyTurnWorker wrtcConnectProxyTurnWorker;

  _ReportItem__isset __isset;

  void __set_uri(const int32_t val);

  void __set_encryptedItem(const EncryptedItem& val);

  void __set_vosdkCounter(const VosdkCounter& val);

  void __set_vosdkSession(const VosdkSession& val);

  void __set_vosdkVocs(const VosdkVocs& val);

  void __set_vosdkVos(const VosdkVos& val);

  void __set_vosdkWebQuit(const VosdkWebQuit& val);

  void __set_wrtcBrowser2Gateway(const WrtcBrowser2Gateway& val);

  void __set_wrtcBrowser2GatewayVideo(const WrtcBrowser2Gateway& val);

  void __set_wrtcBrowser2BrowserAudio(const WrtcBrowser2Browser& val);

  void __set_wrtcBrowser2BrowserVideo(const WrtcBrowser2Browser& val);

  void __set_wrtcProfile(const WrtcProfile& val);

  void __set_wrtcPubStream(const WrtcPubStream& val);

  void __set_wrtcUnpubStream(const WrtcUnpubStream& val);

  void __set_wrtcSubStream(const WrtcSubStream& val);

  void __set_wrtcUnsubStream(const WrtcUnsubStream& val);

  void __set_wrtcEventsSequence(const WrtcEventsSequence& val);

  void __set_wrtcReceiverReport(const WrtcReceiverReport& val);

  void __set_wrtcGateway2Browser(const WrtcGateway2Browser& val);

  void __set_wrtcStreamControl(const WrtcStreamControl& val);

  void __set_wrtcConnectProxyTurnWorker(const WrtcConnectProxyTurnWorker& val);

  bool operator == (const ReportItem & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (__isset.encryptedItem != rhs.__isset.encryptedItem)
      return false;
    else if (__isset.encryptedItem && !(encryptedItem == rhs.encryptedItem))
      return false;
    if (__isset.vosdkCounter != rhs.__isset.vosdkCounter)
      return false;
    else if (__isset.vosdkCounter && !(vosdkCounter == rhs.vosdkCounter))
      return false;
    if (__isset.vosdkSession != rhs.__isset.vosdkSession)
      return false;
    else if (__isset.vosdkSession && !(vosdkSession == rhs.vosdkSession))
      return false;
    if (__isset.vosdkVocs != rhs.__isset.vosdkVocs)
      return false;
    else if (__isset.vosdkVocs && !(vosdkVocs == rhs.vosdkVocs))
      return false;
    if (__isset.vosdkVos != rhs.__isset.vosdkVos)
      return false;
    else if (__isset.vosdkVos && !(vosdkVos == rhs.vosdkVos))
      return false;
    if (__isset.vosdkWebQuit != rhs.__isset.vosdkWebQuit)
      return false;
    else if (__isset.vosdkWebQuit && !(vosdkWebQuit == rhs.vosdkWebQuit))
      return false;
    if (__isset.wrtcBrowser2Gateway != rhs.__isset.wrtcBrowser2Gateway)
      return false;
    else if (__isset.wrtcBrowser2Gateway && !(wrtcBrowser2Gateway == rhs.wrtcBrowser2Gateway))
      return false;
    if (__isset.wrtcBrowser2GatewayVideo != rhs.__isset.wrtcBrowser2GatewayVideo)
      return false;
    else if (__isset.wrtcBrowser2GatewayVideo && !(wrtcBrowser2GatewayVideo == rhs.wrtcBrowser2GatewayVideo))
      return false;
    if (__isset.wrtcBrowser2BrowserAudio != rhs.__isset.wrtcBrowser2BrowserAudio)
      return false;
    else if (__isset.wrtcBrowser2BrowserAudio && !(wrtcBrowser2BrowserAudio == rhs.wrtcBrowser2BrowserAudio))
      return false;
    if (__isset.wrtcBrowser2BrowserVideo != rhs.__isset.wrtcBrowser2BrowserVideo)
      return false;
    else if (__isset.wrtcBrowser2BrowserVideo && !(wrtcBrowser2BrowserVideo == rhs.wrtcBrowser2BrowserVideo))
      return false;
    if (__isset.wrtcProfile != rhs.__isset.wrtcProfile)
      return false;
    else if (__isset.wrtcProfile && !(wrtcProfile == rhs.wrtcProfile))
      return false;
    if (__isset.wrtcPubStream != rhs.__isset.wrtcPubStream)
      return false;
    else if (__isset.wrtcPubStream && !(wrtcPubStream == rhs.wrtcPubStream))
      return false;
    if (__isset.wrtcUnpubStream != rhs.__isset.wrtcUnpubStream)
      return false;
    else if (__isset.wrtcUnpubStream && !(wrtcUnpubStream == rhs.wrtcUnpubStream))
      return false;
    if (__isset.wrtcSubStream != rhs.__isset.wrtcSubStream)
      return false;
    else if (__isset.wrtcSubStream && !(wrtcSubStream == rhs.wrtcSubStream))
      return false;
    if (__isset.wrtcUnsubStream != rhs.__isset.wrtcUnsubStream)
      return false;
    else if (__isset.wrtcUnsubStream && !(wrtcUnsubStream == rhs.wrtcUnsubStream))
      return false;
    if (__isset.wrtcEventsSequence != rhs.__isset.wrtcEventsSequence)
      return false;
    else if (__isset.wrtcEventsSequence && !(wrtcEventsSequence == rhs.wrtcEventsSequence))
      return false;
    if (__isset.wrtcReceiverReport != rhs.__isset.wrtcReceiverReport)
      return false;
    else if (__isset.wrtcReceiverReport && !(wrtcReceiverReport == rhs.wrtcReceiverReport))
      return false;
    if (__isset.wrtcGateway2Browser != rhs.__isset.wrtcGateway2Browser)
      return false;
    else if (__isset.wrtcGateway2Browser && !(wrtcGateway2Browser == rhs.wrtcGateway2Browser))
      return false;
    if (__isset.wrtcStreamControl != rhs.__isset.wrtcStreamControl)
      return false;
    else if (__isset.wrtcStreamControl && !(wrtcStreamControl == rhs.wrtcStreamControl))
      return false;
    if (__isset.wrtcConnectProxyTurnWorker != rhs.__isset.wrtcConnectProxyTurnWorker)
      return false;
    else if (__isset.wrtcConnectProxyTurnWorker && !(wrtcConnectProxyTurnWorker == rhs.wrtcConnectProxyTurnWorker))
      return false;
    return true;
  }
  bool operator != (const ReportItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReportItem& obj);
};

void swap(ReportItem &a, ReportItem &b);



#endif
